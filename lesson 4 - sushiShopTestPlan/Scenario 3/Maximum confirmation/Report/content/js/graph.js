/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 17.0, "minX": 0.0, "maxY": 1049025.0, "series": [{"data": [[0.0, 29.0], [0.1, 31.0], [0.2, 31.0], [0.3, 32.0], [0.4, 32.0], [0.5, 32.0], [0.6, 32.0], [0.7, 32.0], [0.8, 32.0], [0.9, 33.0], [1.0, 33.0], [1.1, 33.0], [1.2, 33.0], [1.3, 33.0], [1.4, 33.0], [1.5, 33.0], [1.6, 33.0], [1.7, 33.0], [1.8, 33.0], [1.9, 33.0], [2.0, 33.0], [2.1, 33.0], [2.2, 34.0], [2.3, 34.0], [2.4, 34.0], [2.5, 34.0], [2.6, 34.0], [2.7, 34.0], [2.8, 34.0], [2.9, 35.0], [3.0, 35.0], [3.1, 35.0], [3.2, 35.0], [3.3, 36.0], [3.4, 36.0], [3.5, 36.0], [3.6, 37.0], [3.7, 37.0], [3.8, 38.0], [3.9, 39.0], [4.0, 39.0], [4.1, 39.0], [4.2, 39.0], [4.3, 40.0], [4.4, 40.0], [4.5, 40.0], [4.6, 40.0], [4.7, 40.0], [4.8, 40.0], [4.9, 40.0], [5.0, 40.0], [5.1, 40.0], [5.2, 40.0], [5.3, 40.0], [5.4, 40.0], [5.5, 40.0], [5.6, 40.0], [5.7, 40.0], [5.8, 40.0], [5.9, 40.0], [6.0, 40.0], [6.1, 40.0], [6.2, 40.0], [6.3, 41.0], [6.4, 41.0], [6.5, 41.0], [6.6, 41.0], [6.7, 41.0], [6.8, 41.0], [6.9, 41.0], [7.0, 41.0], [7.1, 41.0], [7.2, 41.0], [7.3, 41.0], [7.4, 41.0], [7.5, 41.0], [7.6, 41.0], [7.7, 41.0], [7.8, 41.0], [7.9, 41.0], [8.0, 41.0], [8.1, 41.0], [8.2, 41.0], [8.3, 41.0], [8.4, 41.0], [8.5, 41.0], [8.6, 41.0], [8.7, 41.0], [8.8, 41.0], [8.9, 41.0], [9.0, 41.0], [9.1, 41.0], [9.2, 41.0], [9.3, 41.0], [9.4, 41.0], [9.5, 41.0], [9.6, 41.0], [9.7, 41.0], [9.8, 41.0], [9.9, 41.0], [10.0, 41.0], [10.1, 41.0], [10.2, 41.0], [10.3, 41.0], [10.4, 41.0], [10.5, 41.0], [10.6, 41.0], [10.7, 41.0], [10.8, 41.0], [10.9, 41.0], [11.0, 41.0], [11.1, 41.0], [11.2, 41.0], [11.3, 41.0], [11.4, 41.0], [11.5, 41.0], [11.6, 41.0], [11.7, 41.0], [11.8, 41.0], [11.9, 41.0], [12.0, 41.0], [12.1, 41.0], [12.2, 41.0], [12.3, 41.0], [12.4, 41.0], [12.5, 41.0], [12.6, 41.0], [12.7, 41.0], [12.8, 41.0], [12.9, 41.0], [13.0, 41.0], [13.1, 41.0], [13.2, 41.0], [13.3, 41.0], [13.4, 41.0], [13.5, 41.0], [13.6, 41.0], [13.7, 41.0], [13.8, 41.0], [13.9, 41.0], [14.0, 42.0], [14.1, 42.0], [14.2, 42.0], [14.3, 42.0], [14.4, 42.0], [14.5, 42.0], [14.6, 42.0], [14.7, 42.0], [14.8, 42.0], [14.9, 42.0], [15.0, 42.0], [15.1, 42.0], [15.2, 42.0], [15.3, 42.0], [15.4, 42.0], [15.5, 42.0], [15.6, 42.0], [15.7, 42.0], [15.8, 42.0], [15.9, 42.0], [16.0, 42.0], [16.1, 42.0], [16.2, 42.0], [16.3, 42.0], [16.4, 42.0], [16.5, 42.0], [16.6, 42.0], [16.7, 42.0], [16.8, 42.0], [16.9, 42.0], [17.0, 42.0], [17.1, 42.0], [17.2, 42.0], [17.3, 42.0], [17.4, 42.0], [17.5, 42.0], [17.6, 42.0], [17.7, 42.0], [17.8, 42.0], [17.9, 42.0], [18.0, 42.0], [18.1, 42.0], [18.2, 42.0], [18.3, 42.0], [18.4, 42.0], [18.5, 42.0], [18.6, 42.0], [18.7, 42.0], [18.8, 42.0], [18.9, 42.0], [19.0, 42.0], [19.1, 42.0], [19.2, 42.0], [19.3, 42.0], [19.4, 42.0], [19.5, 42.0], [19.6, 42.0], [19.7, 42.0], [19.8, 42.0], [19.9, 42.0], [20.0, 42.0], [20.1, 42.0], [20.2, 42.0], [20.3, 42.0], [20.4, 42.0], [20.5, 42.0], [20.6, 42.0], [20.7, 42.0], [20.8, 42.0], [20.9, 42.0], [21.0, 42.0], [21.1, 42.0], [21.2, 42.0], [21.3, 42.0], [21.4, 42.0], [21.5, 42.0], [21.6, 42.0], [21.7, 42.0], [21.8, 42.0], [21.9, 42.0], [22.0, 42.0], [22.1, 42.0], [22.2, 42.0], [22.3, 42.0], [22.4, 42.0], [22.5, 42.0], [22.6, 42.0], [22.7, 42.0], [22.8, 42.0], [22.9, 42.0], [23.0, 42.0], [23.1, 42.0], [23.2, 42.0], [23.3, 42.0], [23.4, 42.0], [23.5, 42.0], [23.6, 42.0], [23.7, 42.0], [23.8, 42.0], [23.9, 42.0], [24.0, 42.0], [24.1, 42.0], [24.2, 42.0], [24.3, 42.0], [24.4, 42.0], [24.5, 42.0], [24.6, 42.0], [24.7, 42.0], [24.8, 42.0], [24.9, 42.0], [25.0, 42.0], [25.1, 42.0], [25.2, 42.0], [25.3, 42.0], [25.4, 42.0], [25.5, 42.0], [25.6, 42.0], [25.7, 42.0], [25.8, 42.0], [25.9, 42.0], [26.0, 42.0], [26.1, 42.0], [26.2, 42.0], [26.3, 42.0], [26.4, 42.0], [26.5, 42.0], [26.6, 42.0], [26.7, 42.0], [26.8, 42.0], [26.9, 42.0], [27.0, 42.0], [27.1, 42.0], [27.2, 42.0], [27.3, 42.0], [27.4, 42.0], [27.5, 42.0], [27.6, 42.0], [27.7, 42.0], [27.8, 42.0], [27.9, 42.0], [28.0, 42.0], [28.1, 42.0], [28.2, 42.0], [28.3, 42.0], [28.4, 42.0], [28.5, 42.0], [28.6, 42.0], [28.7, 42.0], [28.8, 42.0], [28.9, 42.0], [29.0, 42.0], [29.1, 42.0], [29.2, 42.0], [29.3, 42.0], [29.4, 42.0], [29.5, 42.0], [29.6, 42.0], [29.7, 42.0], [29.8, 42.0], [29.9, 42.0], [30.0, 42.0], [30.1, 42.0], [30.2, 42.0], [30.3, 42.0], [30.4, 42.0], [30.5, 42.0], [30.6, 42.0], [30.7, 42.0], [30.8, 42.0], [30.9, 42.0], [31.0, 42.0], [31.1, 42.0], [31.2, 42.0], [31.3, 42.0], [31.4, 42.0], [31.5, 42.0], [31.6, 42.0], [31.7, 42.0], [31.8, 42.0], [31.9, 42.0], [32.0, 42.0], [32.1, 42.0], [32.2, 42.0], [32.3, 42.0], [32.4, 42.0], [32.5, 42.0], [32.6, 42.0], [32.7, 42.0], [32.8, 42.0], [32.9, 42.0], [33.0, 42.0], [33.1, 42.0], [33.2, 42.0], [33.3, 42.0], [33.4, 42.0], [33.5, 42.0], [33.6, 42.0], [33.7, 42.0], [33.8, 42.0], [33.9, 43.0], [34.0, 43.0], [34.1, 43.0], [34.2, 43.0], [34.3, 43.0], [34.4, 43.0], [34.5, 43.0], [34.6, 43.0], [34.7, 43.0], [34.8, 43.0], [34.9, 43.0], [35.0, 43.0], [35.1, 43.0], [35.2, 43.0], [35.3, 43.0], [35.4, 43.0], [35.5, 43.0], [35.6, 43.0], [35.7, 43.0], [35.8, 43.0], [35.9, 43.0], [36.0, 43.0], [36.1, 43.0], [36.2, 43.0], [36.3, 43.0], [36.4, 43.0], [36.5, 43.0], [36.6, 43.0], [36.7, 43.0], [36.8, 43.0], [36.9, 43.0], [37.0, 43.0], [37.1, 43.0], [37.2, 43.0], [37.3, 43.0], [37.4, 43.0], [37.5, 43.0], [37.6, 43.0], [37.7, 43.0], [37.8, 43.0], [37.9, 43.0], [38.0, 43.0], [38.1, 43.0], [38.2, 43.0], [38.3, 43.0], [38.4, 43.0], [38.5, 43.0], [38.6, 43.0], [38.7, 43.0], [38.8, 43.0], [38.9, 43.0], [39.0, 43.0], [39.1, 43.0], [39.2, 43.0], [39.3, 43.0], [39.4, 43.0], [39.5, 43.0], [39.6, 43.0], [39.7, 43.0], [39.8, 43.0], [39.9, 43.0], [40.0, 43.0], [40.1, 43.0], [40.2, 43.0], [40.3, 43.0], [40.4, 43.0], [40.5, 43.0], [40.6, 43.0], [40.7, 43.0], [40.8, 43.0], [40.9, 43.0], [41.0, 43.0], [41.1, 43.0], [41.2, 43.0], [41.3, 43.0], [41.4, 43.0], [41.5, 43.0], [41.6, 43.0], [41.7, 43.0], [41.8, 43.0], [41.9, 43.0], [42.0, 43.0], [42.1, 43.0], [42.2, 43.0], [42.3, 43.0], [42.4, 43.0], [42.5, 43.0], [42.6, 43.0], [42.7, 43.0], [42.8, 43.0], [42.9, 43.0], [43.0, 43.0], [43.1, 43.0], [43.2, 43.0], [43.3, 43.0], [43.4, 43.0], [43.5, 43.0], [43.6, 43.0], [43.7, 43.0], [43.8, 43.0], [43.9, 43.0], [44.0, 43.0], [44.1, 43.0], [44.2, 43.0], [44.3, 43.0], [44.4, 43.0], [44.5, 43.0], [44.6, 43.0], [44.7, 43.0], [44.8, 43.0], [44.9, 43.0], [45.0, 43.0], [45.1, 43.0], [45.2, 43.0], [45.3, 43.0], [45.4, 43.0], [45.5, 43.0], [45.6, 43.0], [45.7, 43.0], [45.8, 43.0], [45.9, 43.0], [46.0, 43.0], [46.1, 43.0], [46.2, 43.0], [46.3, 43.0], [46.4, 43.0], [46.5, 43.0], [46.6, 43.0], [46.7, 43.0], [46.8, 43.0], [46.9, 43.0], [47.0, 43.0], [47.1, 43.0], [47.2, 43.0], [47.3, 43.0], [47.4, 43.0], [47.5, 43.0], [47.6, 43.0], [47.7, 43.0], [47.8, 43.0], [47.9, 43.0], [48.0, 43.0], [48.1, 43.0], [48.2, 43.0], [48.3, 43.0], [48.4, 43.0], [48.5, 43.0], [48.6, 43.0], [48.7, 43.0], [48.8, 43.0], [48.9, 43.0], [49.0, 43.0], [49.1, 43.0], [49.2, 43.0], [49.3, 43.0], [49.4, 43.0], [49.5, 43.0], [49.6, 43.0], [49.7, 43.0], [49.8, 43.0], [49.9, 43.0], [50.0, 43.0], [50.1, 43.0], [50.2, 43.0], [50.3, 43.0], [50.4, 43.0], [50.5, 43.0], [50.6, 43.0], [50.7, 43.0], [50.8, 43.0], [50.9, 43.0], [51.0, 43.0], [51.1, 43.0], [51.2, 43.0], [51.3, 43.0], [51.4, 43.0], [51.5, 43.0], [51.6, 43.0], [51.7, 43.0], [51.8, 43.0], [51.9, 43.0], [52.0, 43.0], [52.1, 43.0], [52.2, 43.0], [52.3, 43.0], [52.4, 43.0], [52.5, 43.0], [52.6, 43.0], [52.7, 43.0], [52.8, 43.0], [52.9, 43.0], [53.0, 43.0], [53.1, 43.0], [53.2, 43.0], [53.3, 43.0], [53.4, 43.0], [53.5, 43.0], [53.6, 43.0], [53.7, 43.0], [53.8, 43.0], [53.9, 43.0], [54.0, 43.0], [54.1, 43.0], [54.2, 43.0], [54.3, 43.0], [54.4, 43.0], [54.5, 43.0], [54.6, 43.0], [54.7, 43.0], [54.8, 43.0], [54.9, 43.0], [55.0, 43.0], [55.1, 43.0], [55.2, 43.0], [55.3, 43.0], [55.4, 43.0], [55.5, 43.0], [55.6, 43.0], [55.7, 43.0], [55.8, 43.0], [55.9, 43.0], [56.0, 43.0], [56.1, 43.0], [56.2, 43.0], [56.3, 44.0], [56.4, 44.0], [56.5, 44.0], [56.6, 44.0], [56.7, 44.0], [56.8, 44.0], [56.9, 44.0], [57.0, 44.0], [57.1, 44.0], [57.2, 44.0], [57.3, 44.0], [57.4, 44.0], [57.5, 44.0], [57.6, 44.0], [57.7, 44.0], [57.8, 44.0], [57.9, 44.0], [58.0, 44.0], [58.1, 44.0], [58.2, 44.0], [58.3, 44.0], [58.4, 44.0], [58.5, 44.0], [58.6, 44.0], [58.7, 44.0], [58.8, 44.0], [58.9, 44.0], [59.0, 44.0], [59.1, 44.0], [59.2, 44.0], [59.3, 44.0], [59.4, 44.0], [59.5, 44.0], [59.6, 44.0], [59.7, 44.0], [59.8, 44.0], [59.9, 44.0], [60.0, 44.0], [60.1, 44.0], [60.2, 44.0], [60.3, 44.0], [60.4, 44.0], [60.5, 44.0], [60.6, 44.0], [60.7, 44.0], [60.8, 44.0], [60.9, 44.0], [61.0, 44.0], [61.1, 44.0], [61.2, 44.0], [61.3, 44.0], [61.4, 44.0], [61.5, 44.0], [61.6, 44.0], [61.7, 44.0], [61.8, 44.0], [61.9, 44.0], [62.0, 44.0], [62.1, 44.0], [62.2, 44.0], [62.3, 44.0], [62.4, 44.0], [62.5, 44.0], [62.6, 44.0], [62.7, 44.0], [62.8, 44.0], [62.9, 44.0], [63.0, 44.0], [63.1, 44.0], [63.2, 44.0], [63.3, 44.0], [63.4, 44.0], [63.5, 44.0], [63.6, 44.0], [63.7, 44.0], [63.8, 44.0], [63.9, 44.0], [64.0, 44.0], [64.1, 44.0], [64.2, 44.0], [64.3, 44.0], [64.4, 44.0], [64.5, 44.0], [64.6, 44.0], [64.7, 44.0], [64.8, 44.0], [64.9, 44.0], [65.0, 44.0], [65.1, 44.0], [65.2, 44.0], [65.3, 44.0], [65.4, 44.0], [65.5, 44.0], [65.6, 44.0], [65.7, 44.0], [65.8, 44.0], [65.9, 44.0], [66.0, 44.0], [66.1, 44.0], [66.2, 44.0], [66.3, 44.0], [66.4, 44.0], [66.5, 44.0], [66.6, 44.0], [66.7, 44.0], [66.8, 44.0], [66.9, 44.0], [67.0, 44.0], [67.1, 44.0], [67.2, 44.0], [67.3, 44.0], [67.4, 44.0], [67.5, 44.0], [67.6, 44.0], [67.7, 44.0], [67.8, 44.0], [67.9, 44.0], [68.0, 44.0], [68.1, 44.0], [68.2, 44.0], [68.3, 44.0], [68.4, 44.0], [68.5, 44.0], [68.6, 44.0], [68.7, 44.0], [68.8, 44.0], [68.9, 44.0], [69.0, 44.0], [69.1, 44.0], [69.2, 44.0], [69.3, 44.0], [69.4, 44.0], [69.5, 44.0], [69.6, 44.0], [69.7, 44.0], [69.8, 44.0], [69.9, 44.0], [70.0, 44.0], [70.1, 44.0], [70.2, 44.0], [70.3, 45.0], [70.4, 45.0], [70.5, 45.0], [70.6, 45.0], [70.7, 45.0], [70.8, 45.0], [70.9, 45.0], [71.0, 45.0], [71.1, 45.0], [71.2, 45.0], [71.3, 45.0], [71.4, 45.0], [71.5, 45.0], [71.6, 45.0], [71.7, 45.0], [71.8, 45.0], [71.9, 45.0], [72.0, 45.0], [72.1, 45.0], [72.2, 45.0], [72.3, 45.0], [72.4, 45.0], [72.5, 45.0], [72.6, 45.0], [72.7, 45.0], [72.8, 45.0], [72.9, 45.0], [73.0, 45.0], [73.1, 45.0], [73.2, 45.0], [73.3, 45.0], [73.4, 45.0], [73.5, 45.0], [73.6, 45.0], [73.7, 45.0], [73.8, 45.0], [73.9, 45.0], [74.0, 45.0], [74.1, 45.0], [74.2, 45.0], [74.3, 45.0], [74.4, 45.0], [74.5, 45.0], [74.6, 45.0], [74.7, 45.0], [74.8, 45.0], [74.9, 45.0], [75.0, 45.0], [75.1, 45.0], [75.2, 45.0], [75.3, 45.0], [75.4, 45.0], [75.5, 45.0], [75.6, 45.0], [75.7, 45.0], [75.8, 45.0], [75.9, 45.0], [76.0, 45.0], [76.1, 45.0], [76.2, 45.0], [76.3, 45.0], [76.4, 45.0], [76.5, 45.0], [76.6, 45.0], [76.7, 45.0], [76.8, 45.0], [76.9, 45.0], [77.0, 45.0], [77.1, 45.0], [77.2, 45.0], [77.3, 45.0], [77.4, 45.0], [77.5, 45.0], [77.6, 45.0], [77.7, 45.0], [77.8, 45.0], [77.9, 45.0], [78.0, 45.0], [78.1, 45.0], [78.2, 45.0], [78.3, 45.0], [78.4, 45.0], [78.5, 45.0], [78.6, 45.0], [78.7, 45.0], [78.8, 45.0], [78.9, 45.0], [79.0, 45.0], [79.1, 45.0], [79.2, 45.0], [79.3, 45.0], [79.4, 45.0], [79.5, 45.0], [79.6, 45.0], [79.7, 46.0], [79.8, 46.0], [79.9, 46.0], [80.0, 46.0], [80.1, 46.0], [80.2, 46.0], [80.3, 46.0], [80.4, 46.0], [80.5, 46.0], [80.6, 46.0], [80.7, 46.0], [80.8, 46.0], [80.9, 46.0], [81.0, 46.0], [81.1, 46.0], [81.2, 46.0], [81.3, 46.0], [81.4, 46.0], [81.5, 46.0], [81.6, 46.0], [81.7, 46.0], [81.8, 46.0], [81.9, 46.0], [82.0, 46.0], [82.1, 46.0], [82.2, 46.0], [82.3, 46.0], [82.4, 46.0], [82.5, 46.0], [82.6, 46.0], [82.7, 46.0], [82.8, 46.0], [82.9, 46.0], [83.0, 46.0], [83.1, 46.0], [83.2, 46.0], [83.3, 46.0], [83.4, 46.0], [83.5, 46.0], [83.6, 46.0], [83.7, 46.0], [83.8, 46.0], [83.9, 46.0], [84.0, 46.0], [84.1, 46.0], [84.2, 46.0], [84.3, 46.0], [84.4, 46.0], [84.5, 46.0], [84.6, 46.0], [84.7, 46.0], [84.8, 46.0], [84.9, 46.0], [85.0, 46.0], [85.1, 46.0], [85.2, 46.0], [85.3, 46.0], [85.4, 46.0], [85.5, 46.0], [85.6, 46.0], [85.7, 46.0], [85.8, 46.0], [85.9, 46.0], [86.0, 46.0], [86.1, 46.0], [86.2, 46.0], [86.3, 46.0], [86.4, 46.0], [86.5, 46.0], [86.6, 46.0], [86.7, 46.0], [86.8, 46.0], [86.9, 47.0], [87.0, 47.0], [87.1, 47.0], [87.2, 47.0], [87.3, 47.0], [87.4, 47.0], [87.5, 47.0], [87.6, 47.0], [87.7, 47.0], [87.8, 47.0], [87.9, 47.0], [88.0, 47.0], [88.1, 47.0], [88.2, 47.0], [88.3, 47.0], [88.4, 47.0], [88.5, 47.0], [88.6, 47.0], [88.7, 47.0], [88.8, 47.0], [88.9, 47.0], [89.0, 47.0], [89.1, 47.0], [89.2, 47.0], [89.3, 47.0], [89.4, 47.0], [89.5, 47.0], [89.6, 47.0], [89.7, 47.0], [89.8, 47.0], [89.9, 47.0], [90.0, 47.0], [90.1, 47.0], [90.2, 47.0], [90.3, 47.0], [90.4, 47.0], [90.5, 47.0], [90.6, 47.0], [90.7, 47.0], [90.8, 47.0], [90.9, 47.0], [91.0, 47.0], [91.1, 47.0], [91.2, 47.0], [91.3, 47.0], [91.4, 47.0], [91.5, 47.0], [91.6, 48.0], [91.7, 48.0], [91.8, 48.0], [91.9, 48.0], [92.0, 48.0], [92.1, 48.0], [92.2, 48.0], [92.3, 48.0], [92.4, 48.0], [92.5, 48.0], [92.6, 48.0], [92.7, 48.0], [92.8, 48.0], [92.9, 48.0], [93.0, 48.0], [93.1, 48.0], [93.2, 48.0], [93.3, 48.0], [93.4, 48.0], [93.5, 48.0], [93.6, 48.0], [93.7, 48.0], [93.8, 48.0], [93.9, 48.0], [94.0, 48.0], [94.1, 49.0], [94.2, 49.0], [94.3, 49.0], [94.4, 49.0], [94.5, 49.0], [94.6, 49.0], [94.7, 49.0], [94.8, 49.0], [94.9, 49.0], [95.0, 49.0], [95.1, 49.0], [95.2, 49.0], [95.3, 50.0], [95.4, 50.0], [95.5, 50.0], [95.6, 50.0], [95.7, 50.0], [95.8, 50.0], [95.9, 50.0], [96.0, 51.0], [96.1, 51.0], [96.2, 51.0], [96.3, 52.0], [96.4, 52.0], [96.5, 53.0], [96.6, 54.0], [96.7, 55.0], [96.8, 57.0], [96.9, 60.0], [97.0, 66.0], [97.1, 89.0], [97.2, 112.0], [97.3, 114.0], [97.4, 118.0], [97.5, 121.0], [97.6, 315.0], [97.7, 322.0], [97.8, 338.0], [97.9, 1042.0], [98.0, 1045.0], [98.1, 1046.0], [98.2, 1048.0], [98.3, 1050.0], [98.4, 1052.0], [98.5, 1055.0], [98.6, 1058.0], [98.7, 1062.0], [98.8, 1065.0], [98.9, 1067.0], [99.0, 1069.0], [99.1, 1070.0], [99.2, 1072.0], [99.3, 1074.0], [99.4, 1076.0], [99.5, 1078.0], [99.6, 1080.0], [99.7, 1083.0], [99.8, 1085.0], [99.9, 1090.0]], "isOverall": false, "label": "Open Main Page", "isController": false}, {"data": [[0.0, 17.0], [0.1, 18.0], [0.2, 18.0], [0.3, 18.0], [0.4, 19.0], [0.5, 19.0], [0.6, 19.0], [0.7, 19.0], [0.8, 19.0], [0.9, 19.0], [1.0, 19.0], [1.1, 19.0], [1.2, 19.0], [1.3, 19.0], [1.4, 19.0], [1.5, 19.0], [1.6, 19.0], [1.7, 19.0], [1.8, 19.0], [1.9, 19.0], [2.0, 19.0], [2.1, 19.0], [2.2, 20.0], [2.3, 20.0], [2.4, 20.0], [2.5, 20.0], [2.6, 20.0], [2.7, 20.0], [2.8, 20.0], [2.9, 20.0], [3.0, 20.0], [3.1, 20.0], [3.2, 20.0], [3.3, 21.0], [3.4, 21.0], [3.5, 21.0], [3.6, 21.0], [3.7, 22.0], [3.8, 22.0], [3.9, 22.0], [4.0, 22.0], [4.1, 22.0], [4.2, 22.0], [4.3, 22.0], [4.4, 22.0], [4.5, 22.0], [4.6, 22.0], [4.7, 22.0], [4.8, 22.0], [4.9, 23.0], [5.0, 23.0], [5.1, 23.0], [5.2, 23.0], [5.3, 23.0], [5.4, 23.0], [5.5, 23.0], [5.6, 23.0], [5.7, 23.0], [5.8, 23.0], [5.9, 23.0], [6.0, 23.0], [6.1, 23.0], [6.2, 23.0], [6.3, 23.0], [6.4, 23.0], [6.5, 23.0], [6.6, 23.0], [6.7, 23.0], [6.8, 23.0], [6.9, 23.0], [7.0, 23.0], [7.1, 23.0], [7.2, 23.0], [7.3, 23.0], [7.4, 23.0], [7.5, 23.0], [7.6, 23.0], [7.7, 23.0], [7.8, 23.0], [7.9, 23.0], [8.0, 23.0], [8.1, 23.0], [8.2, 23.0], [8.3, 23.0], [8.4, 23.0], [8.5, 23.0], [8.6, 23.0], [8.7, 23.0], [8.8, 23.0], [8.9, 23.0], [9.0, 23.0], [9.1, 23.0], [9.2, 23.0], [9.3, 23.0], [9.4, 23.0], [9.5, 23.0], [9.6, 23.0], [9.7, 23.0], [9.8, 23.0], [9.9, 23.0], [10.0, 23.0], [10.1, 23.0], [10.2, 23.0], [10.3, 23.0], [10.4, 23.0], [10.5, 23.0], [10.6, 23.0], [10.7, 23.0], [10.8, 23.0], [10.9, 23.0], [11.0, 23.0], [11.1, 23.0], [11.2, 23.0], [11.3, 23.0], [11.4, 23.0], [11.5, 23.0], [11.6, 23.0], [11.7, 23.0], [11.8, 23.0], [11.9, 23.0], [12.0, 23.0], [12.1, 23.0], [12.2, 23.0], [12.3, 23.0], [12.4, 23.0], [12.5, 23.0], [12.6, 23.0], [12.7, 23.0], [12.8, 23.0], [12.9, 23.0], [13.0, 23.0], [13.1, 23.0], [13.2, 23.0], [13.3, 23.0], [13.4, 23.0], [13.5, 23.0], [13.6, 23.0], [13.7, 23.0], [13.8, 23.0], [13.9, 23.0], [14.0, 23.0], [14.1, 23.0], [14.2, 23.0], [14.3, 23.0], [14.4, 23.0], [14.5, 23.0], [14.6, 23.0], [14.7, 23.0], [14.8, 23.0], [14.9, 23.0], [15.0, 23.0], [15.1, 23.0], [15.2, 23.0], [15.3, 23.0], [15.4, 23.0], [15.5, 23.0], [15.6, 23.0], [15.7, 23.0], [15.8, 23.0], [15.9, 23.0], [16.0, 23.0], [16.1, 23.0], [16.2, 23.0], [16.3, 23.0], [16.4, 23.0], [16.5, 23.0], [16.6, 23.0], [16.7, 23.0], [16.8, 23.0], [16.9, 23.0], [17.0, 23.0], [17.1, 23.0], [17.2, 23.0], [17.3, 23.0], [17.4, 23.0], [17.5, 23.0], [17.6, 23.0], [17.7, 24.0], [17.8, 24.0], [17.9, 24.0], [18.0, 24.0], [18.1, 24.0], [18.2, 24.0], [18.3, 24.0], [18.4, 24.0], [18.5, 24.0], [18.6, 24.0], [18.7, 24.0], [18.8, 24.0], [18.9, 24.0], [19.0, 24.0], [19.1, 24.0], [19.2, 24.0], [19.3, 24.0], [19.4, 24.0], [19.5, 24.0], [19.6, 24.0], [19.7, 24.0], [19.8, 24.0], [19.9, 24.0], [20.0, 24.0], [20.1, 24.0], [20.2, 24.0], [20.3, 24.0], [20.4, 24.0], [20.5, 24.0], [20.6, 24.0], [20.7, 24.0], [20.8, 24.0], [20.9, 24.0], [21.0, 24.0], [21.1, 24.0], [21.2, 24.0], [21.3, 24.0], [21.4, 24.0], [21.5, 24.0], [21.6, 24.0], [21.7, 24.0], [21.8, 24.0], [21.9, 24.0], [22.0, 24.0], [22.1, 24.0], [22.2, 24.0], [22.3, 24.0], [22.4, 24.0], [22.5, 24.0], [22.6, 24.0], [22.7, 24.0], [22.8, 24.0], [22.9, 24.0], [23.0, 24.0], [23.1, 24.0], [23.2, 24.0], [23.3, 24.0], [23.4, 24.0], [23.5, 24.0], [23.6, 24.0], [23.7, 24.0], [23.8, 24.0], [23.9, 24.0], [24.0, 24.0], [24.1, 24.0], [24.2, 24.0], [24.3, 24.0], [24.4, 24.0], [24.5, 24.0], [24.6, 24.0], [24.7, 24.0], [24.8, 24.0], [24.9, 24.0], [25.0, 24.0], [25.1, 24.0], [25.2, 24.0], [25.3, 24.0], [25.4, 24.0], [25.5, 24.0], [25.6, 24.0], [25.7, 24.0], [25.8, 24.0], [25.9, 24.0], [26.0, 24.0], [26.1, 24.0], [26.2, 24.0], [26.3, 24.0], [26.4, 24.0], [26.5, 24.0], [26.6, 24.0], [26.7, 24.0], [26.8, 24.0], [26.9, 24.0], [27.0, 24.0], [27.1, 24.0], [27.2, 24.0], [27.3, 24.0], [27.4, 24.0], [27.5, 24.0], [27.6, 24.0], [27.7, 24.0], [27.8, 24.0], [27.9, 24.0], [28.0, 24.0], [28.1, 24.0], [28.2, 24.0], [28.3, 24.0], [28.4, 24.0], [28.5, 24.0], [28.6, 24.0], [28.7, 24.0], [28.8, 24.0], [28.9, 24.0], [29.0, 24.0], [29.1, 24.0], [29.2, 24.0], [29.3, 24.0], [29.4, 24.0], [29.5, 24.0], [29.6, 24.0], [29.7, 24.0], [29.8, 24.0], [29.9, 24.0], [30.0, 24.0], [30.1, 24.0], [30.2, 24.0], [30.3, 24.0], [30.4, 24.0], [30.5, 24.0], [30.6, 24.0], [30.7, 24.0], [30.8, 24.0], [30.9, 24.0], [31.0, 24.0], [31.1, 24.0], [31.2, 24.0], [31.3, 24.0], [31.4, 24.0], [31.5, 24.0], [31.6, 24.0], [31.7, 24.0], [31.8, 24.0], [31.9, 24.0], [32.0, 24.0], [32.1, 24.0], [32.2, 24.0], [32.3, 24.0], [32.4, 24.0], [32.5, 24.0], [32.6, 24.0], [32.7, 24.0], [32.8, 24.0], [32.9, 24.0], [33.0, 24.0], [33.1, 24.0], [33.2, 24.0], [33.3, 24.0], [33.4, 24.0], [33.5, 24.0], [33.6, 24.0], [33.7, 24.0], [33.8, 24.0], [33.9, 24.0], [34.0, 24.0], [34.1, 24.0], [34.2, 24.0], [34.3, 24.0], [34.4, 24.0], [34.5, 24.0], [34.6, 24.0], [34.7, 24.0], [34.8, 24.0], [34.9, 24.0], [35.0, 24.0], [35.1, 24.0], [35.2, 24.0], [35.3, 24.0], [35.4, 24.0], [35.5, 24.0], [35.6, 24.0], [35.7, 24.0], [35.8, 24.0], [35.9, 24.0], [36.0, 24.0], [36.1, 24.0], [36.2, 24.0], [36.3, 24.0], [36.4, 24.0], [36.5, 24.0], [36.6, 24.0], [36.7, 24.0], [36.8, 24.0], [36.9, 24.0], [37.0, 24.0], [37.1, 24.0], [37.2, 24.0], [37.3, 24.0], [37.4, 24.0], [37.5, 24.0], [37.6, 24.0], [37.7, 24.0], [37.8, 24.0], [37.9, 24.0], [38.0, 24.0], [38.1, 24.0], [38.2, 24.0], [38.3, 24.0], [38.4, 24.0], [38.5, 24.0], [38.6, 24.0], [38.7, 24.0], [38.8, 24.0], [38.9, 24.0], [39.0, 24.0], [39.1, 24.0], [39.2, 24.0], [39.3, 24.0], [39.4, 24.0], [39.5, 24.0], [39.6, 24.0], [39.7, 24.0], [39.8, 24.0], [39.9, 24.0], [40.0, 24.0], [40.1, 24.0], [40.2, 24.0], [40.3, 24.0], [40.4, 24.0], [40.5, 24.0], [40.6, 24.0], [40.7, 24.0], [40.8, 24.0], [40.9, 24.0], [41.0, 24.0], [41.1, 24.0], [41.2, 24.0], [41.3, 24.0], [41.4, 24.0], [41.5, 24.0], [41.6, 24.0], [41.7, 24.0], [41.8, 24.0], [41.9, 24.0], [42.0, 24.0], [42.1, 24.0], [42.2, 24.0], [42.3, 24.0], [42.4, 24.0], [42.5, 24.0], [42.6, 24.0], [42.7, 24.0], [42.8, 24.0], [42.9, 24.0], [43.0, 24.0], [43.1, 24.0], [43.2, 24.0], [43.3, 24.0], [43.4, 24.0], [43.5, 24.0], [43.6, 24.0], [43.7, 24.0], [43.8, 24.0], [43.9, 24.0], [44.0, 24.0], [44.1, 24.0], [44.2, 24.0], [44.3, 24.0], [44.4, 24.0], [44.5, 24.0], [44.6, 24.0], [44.7, 24.0], [44.8, 24.0], [44.9, 24.0], [45.0, 24.0], [45.1, 24.0], [45.2, 24.0], [45.3, 24.0], [45.4, 24.0], [45.5, 24.0], [45.6, 24.0], [45.7, 24.0], [45.8, 24.0], [45.9, 24.0], [46.0, 24.0], [46.1, 24.0], [46.2, 24.0], [46.3, 24.0], [46.4, 24.0], [46.5, 24.0], [46.6, 24.0], [46.7, 24.0], [46.8, 24.0], [46.9, 24.0], [47.0, 24.0], [47.1, 24.0], [47.2, 24.0], [47.3, 24.0], [47.4, 24.0], [47.5, 24.0], [47.6, 24.0], [47.7, 24.0], [47.8, 24.0], [47.9, 24.0], [48.0, 24.0], [48.1, 24.0], [48.2, 24.0], [48.3, 24.0], [48.4, 24.0], [48.5, 24.0], [48.6, 24.0], [48.7, 24.0], [48.8, 24.0], [48.9, 24.0], [49.0, 24.0], [49.1, 24.0], [49.2, 24.0], [49.3, 24.0], [49.4, 24.0], [49.5, 24.0], [49.6, 24.0], [49.7, 24.0], [49.8, 24.0], [49.9, 24.0], [50.0, 24.0], [50.1, 24.0], [50.2, 24.0], [50.3, 24.0], [50.4, 24.0], [50.5, 24.0], [50.6, 24.0], [50.7, 24.0], [50.8, 24.0], [50.9, 24.0], [51.0, 24.0], [51.1, 24.0], [51.2, 24.0], [51.3, 24.0], [51.4, 24.0], [51.5, 24.0], [51.6, 24.0], [51.7, 24.0], [51.8, 24.0], [51.9, 24.0], [52.0, 24.0], [52.1, 24.0], [52.2, 24.0], [52.3, 24.0], [52.4, 24.0], [52.5, 24.0], [52.6, 24.0], [52.7, 24.0], [52.8, 24.0], [52.9, 24.0], [53.0, 24.0], [53.1, 24.0], [53.2, 24.0], [53.3, 24.0], [53.4, 24.0], [53.5, 24.0], [53.6, 24.0], [53.7, 24.0], [53.8, 24.0], [53.9, 24.0], [54.0, 24.0], [54.1, 24.0], [54.2, 24.0], [54.3, 24.0], [54.4, 24.0], [54.5, 24.0], [54.6, 24.0], [54.7, 24.0], [54.8, 24.0], [54.9, 24.0], [55.0, 24.0], [55.1, 24.0], [55.2, 24.0], [55.3, 24.0], [55.4, 24.0], [55.5, 24.0], [55.6, 24.0], [55.7, 24.0], [55.8, 24.0], [55.9, 24.0], [56.0, 24.0], [56.1, 24.0], [56.2, 24.0], [56.3, 24.0], [56.4, 24.0], [56.5, 24.0], [56.6, 24.0], [56.7, 24.0], [56.8, 24.0], [56.9, 25.0], [57.0, 25.0], [57.1, 25.0], [57.2, 25.0], [57.3, 25.0], [57.4, 25.0], [57.5, 25.0], [57.6, 25.0], [57.7, 25.0], [57.8, 25.0], [57.9, 25.0], [58.0, 25.0], [58.1, 25.0], [58.2, 25.0], [58.3, 25.0], [58.4, 25.0], [58.5, 25.0], [58.6, 25.0], [58.7, 25.0], [58.8, 25.0], [58.9, 25.0], [59.0, 25.0], [59.1, 25.0], [59.2, 25.0], [59.3, 25.0], [59.4, 25.0], [59.5, 25.0], [59.6, 25.0], [59.7, 25.0], [59.8, 25.0], [59.9, 25.0], [60.0, 25.0], [60.1, 25.0], [60.2, 25.0], [60.3, 25.0], [60.4, 25.0], [60.5, 25.0], [60.6, 25.0], [60.7, 25.0], [60.8, 25.0], [60.9, 25.0], [61.0, 25.0], [61.1, 25.0], [61.2, 25.0], [61.3, 25.0], [61.4, 25.0], [61.5, 25.0], [61.6, 25.0], [61.7, 25.0], [61.8, 25.0], [61.9, 25.0], [62.0, 25.0], [62.1, 25.0], [62.2, 25.0], [62.3, 25.0], [62.4, 25.0], [62.5, 25.0], [62.6, 25.0], [62.7, 25.0], [62.8, 25.0], [62.9, 25.0], [63.0, 25.0], [63.1, 25.0], [63.2, 25.0], [63.3, 25.0], [63.4, 25.0], [63.5, 25.0], [63.6, 25.0], [63.7, 25.0], [63.8, 25.0], [63.9, 25.0], [64.0, 25.0], [64.1, 25.0], [64.2, 25.0], [64.3, 25.0], [64.4, 25.0], [64.5, 25.0], [64.6, 25.0], [64.7, 25.0], [64.8, 25.0], [64.9, 25.0], [65.0, 25.0], [65.1, 25.0], [65.2, 25.0], [65.3, 25.0], [65.4, 25.0], [65.5, 25.0], [65.6, 25.0], [65.7, 25.0], [65.8, 25.0], [65.9, 25.0], [66.0, 25.0], [66.1, 25.0], [66.2, 25.0], [66.3, 25.0], [66.4, 25.0], [66.5, 25.0], [66.6, 25.0], [66.7, 25.0], [66.8, 25.0], [66.9, 25.0], [67.0, 25.0], [67.1, 25.0], [67.2, 25.0], [67.3, 25.0], [67.4, 25.0], [67.5, 25.0], [67.6, 25.0], [67.7, 25.0], [67.8, 25.0], [67.9, 25.0], [68.0, 25.0], [68.1, 25.0], [68.2, 25.0], [68.3, 25.0], [68.4, 25.0], [68.5, 25.0], [68.6, 25.0], [68.7, 25.0], [68.8, 25.0], [68.9, 25.0], [69.0, 25.0], [69.1, 25.0], [69.2, 25.0], [69.3, 25.0], [69.4, 25.0], [69.5, 25.0], [69.6, 25.0], [69.7, 25.0], [69.8, 25.0], [69.9, 25.0], [70.0, 25.0], [70.1, 25.0], [70.2, 25.0], [70.3, 25.0], [70.4, 25.0], [70.5, 25.0], [70.6, 25.0], [70.7, 25.0], [70.8, 25.0], [70.9, 25.0], [71.0, 25.0], [71.1, 25.0], [71.2, 25.0], [71.3, 25.0], [71.4, 25.0], [71.5, 25.0], [71.6, 25.0], [71.7, 25.0], [71.8, 25.0], [71.9, 25.0], [72.0, 25.0], [72.1, 25.0], [72.2, 25.0], [72.3, 25.0], [72.4, 25.0], [72.5, 25.0], [72.6, 25.0], [72.7, 25.0], [72.8, 25.0], [72.9, 25.0], [73.0, 25.0], [73.1, 25.0], [73.2, 25.0], [73.3, 25.0], [73.4, 25.0], [73.5, 25.0], [73.6, 25.0], [73.7, 25.0], [73.8, 25.0], [73.9, 25.0], [74.0, 25.0], [74.1, 25.0], [74.2, 25.0], [74.3, 25.0], [74.4, 25.0], [74.5, 25.0], [74.6, 25.0], [74.7, 25.0], [74.8, 25.0], [74.9, 25.0], [75.0, 25.0], [75.1, 25.0], [75.2, 25.0], [75.3, 25.0], [75.4, 25.0], [75.5, 25.0], [75.6, 25.0], [75.7, 25.0], [75.8, 25.0], [75.9, 25.0], [76.0, 25.0], [76.1, 25.0], [76.2, 25.0], [76.3, 25.0], [76.4, 25.0], [76.5, 25.0], [76.6, 25.0], [76.7, 25.0], [76.8, 25.0], [76.9, 25.0], [77.0, 25.0], [77.1, 25.0], [77.2, 25.0], [77.3, 25.0], [77.4, 25.0], [77.5, 25.0], [77.6, 25.0], [77.7, 25.0], [77.8, 25.0], [77.9, 25.0], [78.0, 25.0], [78.1, 25.0], [78.2, 25.0], [78.3, 25.0], [78.4, 25.0], [78.5, 25.0], [78.6, 25.0], [78.7, 25.0], [78.8, 25.0], [78.9, 25.0], [79.0, 25.0], [79.1, 25.0], [79.2, 25.0], [79.3, 25.0], [79.4, 25.0], [79.5, 25.0], [79.6, 25.0], [79.7, 25.0], [79.8, 25.0], [79.9, 25.0], [80.0, 25.0], [80.1, 25.0], [80.2, 25.0], [80.3, 25.0], [80.4, 25.0], [80.5, 25.0], [80.6, 25.0], [80.7, 26.0], [80.8, 26.0], [80.9, 26.0], [81.0, 26.0], [81.1, 26.0], [81.2, 26.0], [81.3, 26.0], [81.4, 26.0], [81.5, 26.0], [81.6, 26.0], [81.7, 26.0], [81.8, 26.0], [81.9, 26.0], [82.0, 26.0], [82.1, 26.0], [82.2, 26.0], [82.3, 26.0], [82.4, 26.0], [82.5, 26.0], [82.6, 26.0], [82.7, 26.0], [82.8, 26.0], [82.9, 26.0], [83.0, 26.0], [83.1, 26.0], [83.2, 26.0], [83.3, 26.0], [83.4, 26.0], [83.5, 26.0], [83.6, 26.0], [83.7, 26.0], [83.8, 26.0], [83.9, 26.0], [84.0, 26.0], [84.1, 26.0], [84.2, 26.0], [84.3, 26.0], [84.4, 26.0], [84.5, 26.0], [84.6, 26.0], [84.7, 26.0], [84.8, 26.0], [84.9, 26.0], [85.0, 26.0], [85.1, 26.0], [85.2, 26.0], [85.3, 26.0], [85.4, 26.0], [85.5, 26.0], [85.6, 26.0], [85.7, 26.0], [85.8, 26.0], [85.9, 26.0], [86.0, 26.0], [86.1, 26.0], [86.2, 26.0], [86.3, 26.0], [86.4, 26.0], [86.5, 26.0], [86.6, 26.0], [86.7, 26.0], [86.8, 26.0], [86.9, 26.0], [87.0, 26.0], [87.1, 26.0], [87.2, 26.0], [87.3, 26.0], [87.4, 26.0], [87.5, 26.0], [87.6, 26.0], [87.7, 26.0], [87.8, 26.0], [87.9, 26.0], [88.0, 26.0], [88.1, 26.0], [88.2, 26.0], [88.3, 26.0], [88.4, 26.0], [88.5, 26.0], [88.6, 26.0], [88.7, 26.0], [88.8, 26.0], [88.9, 26.0], [89.0, 27.0], [89.1, 27.0], [89.2, 27.0], [89.3, 27.0], [89.4, 27.0], [89.5, 27.0], [89.6, 27.0], [89.7, 27.0], [89.8, 27.0], [89.9, 27.0], [90.0, 27.0], [90.1, 27.0], [90.2, 27.0], [90.3, 27.0], [90.4, 27.0], [90.5, 27.0], [90.6, 27.0], [90.7, 27.0], [90.8, 27.0], [90.9, 27.0], [91.0, 27.0], [91.1, 27.0], [91.2, 27.0], [91.3, 27.0], [91.4, 27.0], [91.5, 27.0], [91.6, 27.0], [91.7, 27.0], [91.8, 27.0], [91.9, 27.0], [92.0, 27.0], [92.1, 27.0], [92.2, 27.0], [92.3, 28.0], [92.4, 28.0], [92.5, 28.0], [92.6, 28.0], [92.7, 28.0], [92.8, 28.0], [92.9, 28.0], [93.0, 28.0], [93.1, 28.0], [93.2, 28.0], [93.3, 28.0], [93.4, 28.0], [93.5, 28.0], [93.6, 28.0], [93.7, 28.0], [93.8, 28.0], [93.9, 28.0], [94.0, 28.0], [94.1, 28.0], [94.2, 28.0], [94.3, 28.0], [94.4, 28.0], [94.5, 28.0], [94.6, 28.0], [94.7, 28.0], [94.8, 28.0], [94.9, 29.0], [95.0, 29.0], [95.1, 29.0], [95.2, 29.0], [95.3, 29.0], [95.4, 29.0], [95.5, 29.0], [95.6, 29.0], [95.7, 29.0], [95.8, 29.0], [95.9, 29.0], [96.0, 29.0], [96.1, 29.0], [96.2, 29.0], [96.3, 29.0], [96.4, 29.0], [96.5, 29.0], [96.6, 29.0], [96.7, 29.0], [96.8, 30.0], [96.9, 30.0], [97.0, 30.0], [97.1, 30.0], [97.2, 30.0], [97.3, 30.0], [97.4, 30.0], [97.5, 30.0], [97.6, 30.0], [97.7, 30.0], [97.8, 30.0], [97.9, 30.0], [98.0, 31.0], [98.1, 31.0], [98.2, 31.0], [98.3, 31.0], [98.4, 31.0], [98.5, 31.0], [98.6, 32.0], [98.7, 32.0], [98.8, 32.0], [98.9, 32.0], [99.0, 33.0], [99.1, 33.0], [99.2, 34.0], [99.3, 35.0], [99.4, 36.0], [99.5, 39.0], [99.6, 41.0], [99.7, 46.0], [99.8, 57.0], [99.9, 99.0], [100.0, 960086.0]], "isOverall": false, "label": "Make an order", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 61876.0, "series": [{"data": [[0.0, 60152.0], [2100.0, 4.0], [3000.0, 2.0], [3100.0, 1.0], [200.0, 18.0], [1000.0, 1316.0], [1100.0, 6.0], [300.0, 145.0], [1300.0, 2.0], [961900.0, 1.0], [1049000.0, 1.0], [100.0, 276.0], [400.0, 2.0], [963000.0, 1.0], [2000.0, 8.0], [1018600.0, 1.0]], "isOverall": false, "label": "Open Main Page", "isController": false}, {"data": [[0.0, 61876.0], [300.0, 21.0], [959700.0, 1.0], [959300.0, 1.0], [959900.0, 1.0], [100.0, 28.0], [200.0, 2.0], [960000.0, 1.0], [956000.0, 1.0], [959800.0, 1.0], [959400.0, 1.0]], "isOverall": false, "label": "Make an order", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1049000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 11.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1\u00A0500ms"], [2, "Requests having \nresponse time > 1\u00A0500ms"], [3, "Requests in error"]], "maxY": 122520.0, "series": [{"data": [[0.0, 122520.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1324.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1\u00A0500ms", "isController": false}, {"data": [[2.0, 15.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1\u00A0500ms", "isController": false}, {"data": [[3.0, 11.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.59753756E12, "maxY": 70.0, "series": [{"data": [[1.59753852E12, 70.0], [1.59754074E12, 70.0], [1.59753912E12, 70.0], [1.59754014E12, 70.0], [1.59754032E12, 70.0], [1.5975381E12, 70.0], [1.59753972E12, 70.0], [1.59754134E12, 70.0], [1.5975393E12, 70.0], [1.5975387E12, 70.0], [1.59753768E12, 60.0], [1.59754092E12, 70.0], [1.59753828E12, 70.0], [1.5975405E12, 70.0], [1.59753888E12, 70.0], [1.5975399E12, 70.0], [1.59754008E12, 70.0], [1.5975417E12, 1.0], [1.5975411E12, 70.0], [1.59753786E12, 49.22402597402595], [1.59753948E12, 70.0], [1.59754128E12, 70.0], [1.59753846E12, 70.0], [1.59753906E12, 70.0], [1.59754068E12, 70.0], [1.59754026E12, 70.0], [1.59753804E12, 70.0], [1.59753864E12, 70.0], [1.59753966E12, 70.0], [1.59753984E12, 70.0], [1.59754146E12, 69.37278705108747], [1.59754086E12, 70.0], [1.59753762E12, 60.0], [1.59753924E12, 70.0], [1.59753822E12, 70.0], [1.59754104E12, 70.0], [1.59753882E12, 70.0], [1.59754044E12, 70.0], [1.59754002E12, 70.0], [1.5975384E12, 70.0], [1.59753942E12, 70.0], [1.597539E12, 70.0], [1.5975396E12, 70.0], [1.59754122E12, 70.0], [1.59754062E12, 70.0], [1.5975408E12, 70.0], [1.59753798E12, 70.0], [1.59753858E12, 70.0], [1.5975402E12, 70.0], [1.59753756E12, 53.91119691119692], [1.59753978E12, 70.0], [1.59753816E12, 70.0], [1.59753918E12, 70.0], [1.5975414E12, 70.0], [1.59753876E12, 70.0], [1.59754098E12, 70.0], [1.59753936E12, 70.0], [1.59754038E12, 70.0], [1.59754056E12, 70.0], [1.59753834E12, 70.0], [1.59753996E12, 70.0], [1.59753954E12, 70.0], [1.59753894E12, 70.0], [1.59753792E12, 70.0], [1.59754116E12, 70.0]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group [Scenario 3 Maximum confirmation]", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5975417E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 23.25, "minX": 1.0, "maxY": 959942.0, "series": [{"data": [[2.0, 73.4], [3.0, 45.5], [4.0, 44.0], [5.0, 44.5], [6.0, 43.0], [7.0, 44.0], [8.0, 44.0], [9.0, 44.5], [10.0, 45.0], [11.0, 44.0], [12.0, 46.0], [13.0, 42.333333333333336], [14.0, 44.0], [15.0, 46.5], [16.0, 46.5], [17.0, 45.0], [18.0, 44.0], [19.0, 43.5], [20.0, 47.0], [21.0, 45.0], [22.0, 47.0], [23.0, 46.5], [24.0, 44.5], [25.0, 44.5], [26.0, 44.0], [27.0, 47.0], [28.0, 47.0], [29.0, 44.5], [30.0, 47.0], [31.0, 48.0], [32.0, 47.5], [33.0, 43.5], [34.0, 43.90909090909091], [35.0, 44.666666666666664], [36.0, 47.666666666666664], [37.0, 42.0], [38.0, 43.62499999999999], [39.0, 45.0], [40.0, 215.16666666666669], [41.0, 44.0], [42.0, 43.0], [43.0, 41.4], [44.0, 43.6], [45.0, 666.0], [46.0, 43.0], [47.0, 45.75], [48.0, 42.666666666666664], [49.0, 43.0], [50.0, 45.5], [51.0, 41.166666666666664], [52.0, 43.6], [53.0, 42.8], [54.0, 42.2], [55.0, 41.6], [56.0, 44.5], [57.0, 57.8], [58.0, 43.0], [59.0, 48.8], [60.0, 73.44253164556962], [61.0, 40.0], [62.0, 116.50000000000001], [63.0, 40.333333333333336], [64.0, 40.333333333333336], [65.0, 41.0], [66.0, 43.0], [67.0, 40.75], [68.0, 41.25], [69.0, 43.25], [70.0, 133.43364595545145]], "isOverall": false, "label": "Open Main Page", "isController": false}, {"data": [[69.56395311289084, 131.28242056316276]], "isOverall": false, "label": "Open Main Page-Aggregated", "isController": false}, {"data": [[2.0, 38.0], [3.0, 31.0], [4.0, 28.5], [5.0, 28.5], [6.0, 27.5], [7.0, 27.5], [8.0, 28.5], [9.0, 32.0], [10.0, 25.5], [11.0, 28.5], [12.0, 28.0], [13.0, 29.0], [14.0, 27.5], [15.0, 28.0], [16.0, 27.0], [17.0, 27.5], [18.0, 26.5], [19.0, 26.5], [20.0, 28.0], [21.0, 26.5], [22.0, 30.5], [23.0, 29.5], [24.0, 25.5], [25.0, 30.5], [26.0, 28.5], [27.0, 29.0], [28.0, 30.0], [29.0, 26.0], [30.0, 25.5], [31.0, 29.0], [32.0, 26.0], [33.0, 25.5], [34.0, 29.454545454545457], [35.0, 36.666666666666664], [36.0, 26.666666666666668], [37.0, 26.5], [38.0, 26.5], [39.0, 26.2], [40.0, 26.4], [41.0, 27.0], [42.0, 26.6], [43.0, 25.6], [44.0, 26.4], [45.0, 28.363636363636367], [46.0, 26.6], [47.0, 26.25], [48.0, 27.666666666666664], [49.0, 26.6], [50.0, 26.0], [51.0, 27.4], [52.0, 26.2], [53.0, 32.6], [54.0, 25.4], [55.0, 24.8], [56.0, 27.8], [57.0, 25.5], [58.0, 29.923076923076927], [59.0, 24.875], [60.0, 25.967071935157023], [61.0, 26.333333333333332], [62.0, 26.0], [63.0, 26.0], [64.0, 25.666666666666668], [65.0, 24.333333333333332], [66.0, 24.4], [67.0, 23.75], [68.0, 23.25], [69.0, 26.0], [70.0, 121.18000636419984], [1.0, 959942.0]], "isOverall": false, "label": "Make an order", "isController": false}, {"data": [[69.56482707398197, 133.2642813317399]], "isOverall": false, "label": "Make an order-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 70.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.59753756E12, "maxY": 41664.45, "series": [{"data": [[1.59753852E12, 40817.2], [1.59754074E12, 38843.0], [1.59753912E12, 40536.78333333333], [1.59754014E12, 38098.9], [1.59754032E12, 36846.11666666667], [1.5975381E12, 41504.066666666666], [1.59753972E12, 39083.1], [1.59754134E12, 41091.71666666667], [1.5975393E12, 40222.066666666666], [1.5975387E12, 40256.9], [1.59753768E12, 31891.733333333334], [1.59754092E12, 39810.35], [1.59753828E12, 41612.48333333333], [1.5975405E12, 38687.98333333333], [1.59753888E12, 40451.35], [1.5975399E12, 39168.95], [1.59754008E12, 38195.76666666667], [1.5975417E12, 43.766666666666666], [1.5975411E12, 39810.28333333333], [1.59753786E12, 6167.733333333334], [1.59753948E12, 39182.4], [1.59754128E12, 41131.65], [1.59753846E12, 41200.166666666664], [1.59753906E12, 40405.0], [1.59754068E12, 39283.53333333333], [1.59754026E12, 36845.833333333336], [1.59753804E12, 41646.71666666667], [1.59753864E12, 40365.55], [1.59753966E12, 39014.933333333334], [1.59753984E12, 39254.583333333336], [1.59754146E12, 39604.066666666666], [1.59754086E12, 38895.8], [1.59753762E12, 35678.11666666667], [1.59753924E12, 40559.3], [1.59753822E12, 41572.36666666667], [1.59754104E12, 39930.3], [1.59753882E12, 40616.75], [1.59754044E12, 38568.166666666664], [1.59754002E12, 37967.05], [1.5975384E12, 41664.45], [1.59753942E12, 39403.25], [1.597539E12, 40370.666666666664], [1.5975396E12, 39404.03333333333], [1.59754122E12, 40946.683333333334], [1.59754062E12, 39329.15], [1.5975408E12, 38533.85], [1.59753798E12, 41486.65], [1.59753858E12, 40531.066666666666], [1.5975402E12, 36845.71666666667], [1.59753756E12, 15573.65], [1.59753978E12, 39248.96666666667], [1.59753816E12, 41532.25], [1.59753918E12, 40490.683333333334], [1.5975414E12, 41086.48333333333], [1.59753876E12, 40364.583333333336], [1.59754098E12, 39810.45], [1.59753936E12, 40599.433333333334], [1.59754038E12, 38098.86666666667], [1.59754056E12, 38858.0], [1.59753834E12, 41601.05], [1.59753996E12, 38235.76666666667], [1.59753954E12, 40010.61666666667], [1.59753894E12, 40370.63333333333], [1.59753792E12, 41292.416666666664], [1.59754116E12, 40294.38333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59753852E12, 12084.416666666666], [1.59754074E12, 11485.233333333334], [1.59753912E12, 12001.466666666667], [1.59754014E12, 11287.883333333333], [1.59754032E12, 10902.0], [1.5975381E12, 12295.133333333333], [1.59753972E12, 11556.333333333334], [1.59754134E12, 12158.1], [1.5975393E12, 11915.933333333332], [1.5975387E12, 11918.516666666666], [1.59753768E12, 9451.133333333333], [1.59754092E12, 11778.9], [1.59753828E12, 12312.15], [1.5975405E12, 11447.1], [1.59753888E12, 11968.5], [1.5975399E12, 11589.3], [1.59754008E12, 11286.366666666667], [1.5975417E12, 0.0], [1.5975411E12, 11778.9], [1.59753786E12, 1824.9], [1.59753948E12, 11574.866666666667], [1.59754128E12, 12169.95], [1.59753846E12, 12175.116666666667], [1.59753906E12, 11947.383333333333], [1.59754068E12, 11615.583333333334], [1.59754026E12, 10902.0], [1.59753804E12, 12314.733333333334], [1.59753864E12, 11935.533333333333], [1.59753966E12, 11551.166666666666], [1.59753984E12, 11622.266666666666], [1.59754146E12, 11710.383333333333], [1.59754086E12, 11482.65], [1.59753762E12, 10549.083333333334], [1.59753924E12, 11985.516666666666], [1.59753822E12, 12300.3], [1.59754104E12, 11814.45], [1.59753882E12, 12025.166666666666], [1.59754044E12, 11411.55], [1.59754002E12, 11233.8], [1.5975384E12, 12342.533333333333], [1.59753942E12, 11651.133333333333], [1.597539E12, 11944.8], [1.5975396E12, 11651.133333333333], [1.59754122E12, 12117.383333333333], [1.59754062E12, 11636.7], [1.5975408E12, 11408.966666666667], [1.59753798E12, 12267.333333333334], [1.59753858E12, 11992.2], [1.5975402E12, 10902.0], [1.59753756E12, 4600.383333333333], [1.59753978E12, 11613.0], [1.59753816E12, 12288.45], [1.59753918E12, 11980.35], [1.5975414E12, 12148.833333333334], [1.59753876E12, 11935.533333333333], [1.59754098E12, 11778.9], [1.59753936E12, 11997.366666666667], [1.59754038E12, 11233.8], [1.59754056E12, 11491.916666666666], [1.59753834E12, 12293.616666666667], [1.59753996E12, 11298.216666666667], [1.59753954E12, 11838.15], [1.59753894E12, 11944.8], [1.59753792E12, 12217.35], [1.59754116E12, 11909.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5975417E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 20.087044534412954, "minX": 1.59753756E12, "maxY": 959942.0, "series": [{"data": [[1.59753852E12, 67.81746810598621], [1.59754074E12, 67.97525773195872], [1.59753912E12, 64.25691699604735], [1.59754014E12, 60.006309148265004], [1.59754032E12, 80.93369565217391], [1.5975381E12, 73.6476833976833], [1.59753972E12, 80.06147540983608], [1.59754134E12, 65.66959064327479], [1.5975393E12, 64.75996015936262], [1.5975387E12, 72.72537313432845], [1.59753768E12, 61.482412060301634], [1.59754092E12, 57.63380281690138], [1.59753828E12, 64.29355149181904], [1.5975405E12, 65.89130434782611], [1.59753888E12, 63.109900990098964], [1.5975399E12, 65.77096114519429], [1.59754008E12, 56.269392033542914], [1.5975411E12, 65.29778672032194], [1.59753786E12, 101.59090909090905], [1.59753948E12, 1135.0992835209822], [1.59754128E12, 61.51119766309636], [1.59753846E12, 68.62099125364435], [1.59753906E12, 67.34192269573838], [1.59754068E12, 67.93679918450573], [1.59754026E12, 73.19673913043478], [1.59753804E12, 75.14903846153848], [1.59753864E12, 72.00099206349218], [1.59753966E12, 70.17453798767967], [1.59753984E12, 62.83265306122455], [1.59754146E12, 55.11122345803844], [1.59754086E12, 66.86274509803924], [1.59753762E12, 88.28058361391705], [1.59753924E12, 60.31490621915104], [1.59753822E12, 71.91040462427755], [1.59754104E12, 71.59578736208627], [1.59753882E12, 63.564102564102555], [1.59754044E12, 63.59813084112144], [1.59754002E12, 64.22468354430363], [1.5975384E12, 61.22211538461537], [1.59753942E12, 67.00914634146343], [1.597539E12, 60.32341269841271], [1.5975396E12, 76.14126016260168], [1.59754122E12, 1057.5479452054794], [1.59754062E12, 70.69246435845217], [1.5975408E12, 66.62370062370066], [1.59753798E12, 75.98262548262545], [1.59753858E12, 61.07015810276679], [1.5975402E12, 69.35326086956522], [1.59753756E12, 59.4473007712082], [1.59753978E12, 67.82346938775518], [1.59753816E12, 66.76856316297014], [1.59753918E12, 62.73293768545992], [1.5975414E12, 49.87816764132556], [1.59753876E12, 69.42361111111127], [1.59754098E12, 67.21830985915487], [1.59753936E12, 56.5976331360947], [1.59754038E12, 60.02953586497894], [1.59754056E12, 1057.070103092784], [1.59753834E12, 66.54282964388838], [1.59753996E12, 69.14764397905746], [1.59753954E12, 70.3093093093092], [1.59753894E12, 61.56845238095245], [1.59753792E12, 92.77303588748805], [1.59754116E12, 1020.4701789264409]], "isOverall": false, "label": "Open Main Page", "isController": false}, {"data": [[1.59753852E12, 25.461764705882352], [1.59754074E12, 25.215686274509807], [1.59753912E12, 24.812438302073073], [1.59754014E12, 24.70724029380904], [1.59754032E12, 25.041304347826088], [1.5975381E12, 25.0279383429672], [1.59753972E12, 25.48512820512822], [1.59754134E12, 22.40448343079919], [1.5975393E12, 24.918489065606366], [1.5975387E12, 24.8817097415507], [1.59753768E12, 25.385964912280677], [1.59754092E12, 24.605633802816918], [1.59753828E12, 24.96727622714149], [1.5975405E12, 24.862318840579707], [1.59753888E12, 24.756435643564362], [1.5975399E12, 24.768916155419205], [1.59754008E12, 24.850840336134464], [1.5975417E12, 959942.0], [1.5975411E12, 24.920523138833], [1.59753786E12, 28.27922077922079], [1.59753948E12, 1006.5644171779132], [1.59754128E12, 24.5900681596884], [1.59753846E12, 25.29308666017528], [1.59753906E12, 25.124999999999993], [1.59754068E12, 25.065306122448973], [1.59754026E12, 25.034782608695675], [1.59753804E12, 25.000962463907577], [1.59753864E12, 25.136047666335642], [1.59753966E12, 25.353846153846163], [1.59753984E12, 25.107033639143687], [1.59754146E12, 20.087044534412954], [1.59754086E12, 2000.9052523171986], [1.59753762E12, 25.912359550561813], [1.59753924E12, 25.007912957467855], [1.59753822E12, 24.997109826589593], [1.59754104E12, 24.905717151454354], [1.59753882E12, 25.106403940886704], [1.59754044E12, 24.81827622014538], [1.59754002E12, 25.40189873417719], [1.5975384E12, 25.04126679462569], [1.59753942E12, 24.74567650050863], [1.597539E12, 25.148809523809543], [1.5975396E12, 24.980671414038664], [1.59754122E12, 24.72629521016619], [1.59754062E12, 24.691446028513212], [1.5975408E12, 25.24922118380062], [1.59753798E12, 25.08405797101447], [1.59753858E12, 25.138339920948628], [1.5975402E12, 25.178260869565207], [1.59753756E12, 28.02061855670102], [1.59753978E12, 24.848979591836724], [1.59753816E12, 25.48794599807137], [1.59753918E12, 25.10484668644906], [1.5975414E12, 20.08780487804876], [1.59753876E12, 25.616683217477664], [1.59754098E12, 24.651911468812845], [1.59753936E12, 24.837944664031593], [1.59754038E12, 3048.9085173501585], [1.59754056E12, 24.98969072164948], [1.59753834E12, 24.829315332690467], [1.59753996E12, 24.714585519412356], [1.59753954E12, 25.183183183183207], [1.59753894E12, 24.817460317460327], [1.59753792E12, 25.806013579049477], [1.59754116E12, 24.637810945273607]], "isOverall": false, "label": "Make an order", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5975417E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.59753756E12, "maxY": 100.38961038961044, "series": [{"data": [[1.59753852E12, 67.45731108930316], [1.59754074E12, 67.65154639175252], [1.59753912E12, 63.98715415019761], [1.59754014E12, 59.98317560462669], [1.59754032E12, 80.27391304347846], [1.5975381E12, 73.25289575289584], [1.59753972E12, 79.49487704918035], [1.59754134E12, 65.46881091617944], [1.5975393E12, 64.41832669322712], [1.5975387E12, 72.36417910447759], [1.59753768E12, 61.298994974874375], [1.59754092E12, 57.48993963782702], [1.59753828E12, 63.952839268527335], [1.5975405E12, 65.79917184265007], [1.59753888E12, 62.861386138613895], [1.5975399E12, 65.71779141104288], [1.59754008E12, 56.210691823899346], [1.5975411E12, 65.1046277665997], [1.59753786E12, 100.38961038961044], [1.59753948E12, 61.07369498464689], [1.59754128E12, 61.31937682570594], [1.59753846E12, 68.29057337220594], [1.59753906E12, 66.91278493557974], [1.59754068E12, 67.58817533129458], [1.59754026E12, 72.95760869565217], [1.59753804E12, 74.67115384615381], [1.59753864E12, 71.59325396825396], [1.59753966E12, 69.77207392197126], [1.59753984E12, 62.55816326530617], [1.59754146E12, 55.0687563195146], [1.59754086E12, 66.55314757481945], [1.59753762E12, 87.82940516273855], [1.59753924E12, 60.00394866732481], [1.59753822E12, 71.39884393063579], [1.59754104E12, 71.22467402206624], [1.59753882E12, 63.311637080867804], [1.59754044E12, 63.331256490135104], [1.59754002E12, 64.18248945147664], [1.5975384E12, 60.96250000000002], [1.59753942E12, 66.5772357723578], [1.597539E12, 60.05357142857139], [1.5975396E12, 74.92073170731706], [1.59754122E12, 60.57925636007828], [1.59754062E12, 70.22708757637493], [1.5975408E12, 66.29937629937636], [1.59753798E12, 75.5366795366796], [1.59753858E12, 60.81521739130436], [1.5975402E12, 69.25543478260869], [1.59753756E12, 59.210796915167094], [1.59753978E12, 67.78265306122456], [1.59753816E12, 66.41465766634518], [1.59753918E12, 62.40949554896147], [1.5975414E12, 49.62085769980505], [1.59753876E12, 69.01785714285712], [1.59754098E12, 66.97887323943672], [1.59753936E12, 56.37376725838268], [1.59754038E12, 60.018987341772075], [1.59754056E12, 63.89072164948448], [1.59753834E12, 66.17131857555346], [1.59753996E12, 68.8743455497382], [1.59753954E12, 69.8238238238238], [1.59753894E12, 61.27380952380944], [1.59753792E12, 92.18622696411256], [1.59754116E12, 64.05864811133202]], "isOverall": false, "label": "Open Main Page", "isController": false}, {"data": [[1.59753852E12, 25.397058823529395], [1.59754074E12, 25.155830753354014], [1.59753912E12, 24.753208292201396], [1.59754014E12, 24.627492130115424], [1.59754032E12, 24.983695652173925], [1.5975381E12, 24.95953757225435], [1.59753972E12, 25.417435897435887], [1.59754134E12, 22.334307992202742], [1.5975393E12, 24.834990059642134], [1.5975387E12, 24.823061630218696], [1.59753768E12, 25.305764411027575], [1.59754092E12, 24.550301810865182], [1.59753828E12, 24.89509143407122], [1.5975405E12, 24.800207039337494], [1.59753888E12, 24.68217821782176], [1.5975399E12, 24.686094069529627], [1.59754008E12, 24.795168067226886], [1.5975417E12, 0.0], [1.5975411E12, 24.85110663983901], [1.59753786E12, 28.058441558441558], [1.59753948E12, 24.824130879345635], [1.59754128E12, 24.541382667964953], [1.59753846E12, 25.222005842258998], [1.59753906E12, 25.069444444444457], [1.59754068E12, 25.01326530612247], [1.59754026E12, 24.969565217391306], [1.59753804E12, 24.911453320500463], [1.59753864E12, 25.068520357497544], [1.59753966E12, 25.289230769230773], [1.59753984E12, 25.02956167176353], [1.59754146E12, 20.01417004048585], [1.59754086E12, 24.715756951596312], [1.59753762E12, 25.812359550561812], [1.59753924E12, 24.94065281899108], [1.59753822E12, 24.926782273603084], [1.59754104E12, 24.830491474423276], [1.59753882E12, 25.048275862068987], [1.59754044E12, 24.758047767393577], [1.59754002E12, 25.33227848101265], [1.5975384E12, 24.96928982725527], [1.59753942E12, 24.703967446592067], [1.597539E12, 25.093253968253958], [1.5975396E12, 24.905391658189178], [1.59754122E12, 24.66862170087978], [1.59754062E12, 24.6334012219959], [1.5975408E12, 25.19106957424713], [1.59753798E12, 24.993236714975865], [1.59753858E12, 25.06324110671935], [1.5975402E12, 25.102173913043444], [1.59753756E12, 27.85051546391753], [1.59753978E12, 24.794897959183693], [1.59753816E12, 25.42237222757957], [1.59753918E12, 25.051434223541058], [1.5975414E12, 20.025365853658517], [1.59753876E12, 25.544190665342605], [1.59754098E12, 24.568410462776622], [1.59753936E12, 24.77470355731225], [1.59754038E12, 24.928496319663513], [1.59754056E12, 24.9340206185567], [1.59753834E12, 24.775313404050138], [1.59753996E12, 24.647429171038862], [1.59753954E12, 25.12712712712715], [1.59753894E12, 24.758928571428577], [1.59753792E12, 25.66731328806987], [1.59754116E12, 24.582089552238806]], "isOverall": false, "label": "Make an order", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5975417E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.59753756E12, "maxY": 74.77922077922075, "series": [{"data": [[1.59753852E12, 44.32384690873407], [1.59754074E12, 44.2958762886598], [1.59753912E12, 41.270750988142275], [1.59754014E12, 37.299684542586824], [1.59754032E12, 57.00326086956522], [1.5975381E12, 49.7982625482626], [1.59753972E12, 55.73872950819675], [1.59754134E12, 45.50000000000006], [1.5975393E12, 41.58864541832669], [1.5975387E12, 48.61293532338308], [1.59753768E12, 38.091708542713576], [1.59754092E12, 34.545271629778696], [1.59753828E12, 40.94898941289705], [1.5975405E12, 42.79503105590061], [1.59753888E12, 39.50198019801976], [1.5975399E12, 43.17586912065442], [1.59754008E12, 32.969601677148844], [1.5975411E12, 41.94567404426555], [1.59753786E12, 74.77922077922075], [1.59753948E12, 39.13203684749235], [1.59754128E12, 37.99221032132424], [1.59753846E12, 44.16423712342075], [1.59753906E12, 43.5569871159564], [1.59754068E12, 44.02956167176356], [1.59754026E12, 49.94456521739133], [1.59753804E12, 51.62307692307693], [1.59753864E12, 47.39186507936513], [1.59753966E12, 46.33264887063656], [1.59753984E12, 39.818367346938786], [1.59754146E12, 36.972699696663284], [1.59754086E12, 43.18782249742005], [1.59753762E12, 64.48597081930409], [1.59753924E12, 36.64461994076995], [1.59753822E12, 48.84874759152215], [1.59754104E12, 47.9177532597793], [1.59753882E12, 40.36883629191319], [1.59754044E12, 39.49636552440297], [1.59754002E12, 40.96413502109701], [1.5975384E12, 37.92884615384617], [1.59753942E12, 43.96951219512191], [1.597539E12, 36.524801587301596], [1.5975396E12, 49.20020325203263], [1.59754122E12, 38.13405088062627], [1.59754062E12, 47.15478615071282], [1.5975408E12, 42.46257796257796], [1.59753798E12, 51.84845559845554], [1.59753858E12, 36.48418972332014], [1.5975402E12, 46.763043478260876], [1.59753756E12, 35.025706940874045], [1.59753978E12, 44.190816326530616], [1.59753816E12, 43.1166827386693], [1.59753918E12, 38.39960435212651], [1.5975414E12, 31.38791423001947], [1.59753876E12, 45.74900793650796], [1.59754098E12, 43.759557344064376], [1.59753936E12, 34.290927021696156], [1.59754038E12, 36.323839662447284], [1.59754056E12, 40.25154639175263], [1.59753834E12, 42.8334937439846], [1.59753996E12, 45.76753926701577], [1.59753954E12, 47.012012012012], [1.59753894E12, 38.365079365079346], [1.59753792E12, 68.66246362754613], [1.59754116E12, 41.345924453280325]], "isOverall": false, "label": "Open Main Page", "isController": false}, {"data": [[1.59753852E12, 0.0], [1.59754074E12, 0.0], [1.59753912E12, 0.0], [1.59754014E12, 0.0], [1.59754032E12, 0.0], [1.5975381E12, 0.0], [1.59753972E12, 0.0], [1.59754134E12, 0.0], [1.5975393E12, 0.0], [1.5975387E12, 0.0], [1.59753768E12, 0.0], [1.59754092E12, 0.0], [1.59753828E12, 0.0], [1.5975405E12, 0.0], [1.59753888E12, 0.0], [1.5975399E12, 0.0], [1.59754008E12, 0.0], [1.5975417E12, 0.0], [1.5975411E12, 0.0], [1.59753786E12, 0.0], [1.59753948E12, 0.021472392638036804], [1.59754128E12, 0.0], [1.59753846E12, 0.0], [1.59753906E12, 0.0], [1.59754068E12, 0.0], [1.59754026E12, 0.0], [1.59753804E12, 0.0], [1.59753864E12, 0.0], [1.59753966E12, 0.0], [1.59753984E12, 0.0], [1.59754146E12, 0.0], [1.59754086E12, 0.0], [1.59753762E12, 0.0], [1.59753924E12, 0.0], [1.59753822E12, 0.0], [1.59754104E12, 0.0], [1.59753882E12, 0.0], [1.59754044E12, 0.0], [1.59754002E12, 0.0], [1.5975384E12, 0.0], [1.59753942E12, 0.0], [1.597539E12, 0.0], [1.5975396E12, 0.0], [1.59754122E12, 0.02150537634408602], [1.59754062E12, 0.0], [1.5975408E12, 0.0], [1.59753798E12, 0.0], [1.59753858E12, 0.0], [1.5975402E12, 0.0], [1.59753756E12, 0.0], [1.59753978E12, 0.0], [1.59753816E12, 0.0], [1.59753918E12, 0.0], [1.5975414E12, 0.0], [1.59753876E12, 0.0], [1.59754098E12, 0.0], [1.59753936E12, 0.0], [1.59754038E12, 0.0], [1.59754056E12, 0.021649484536082477], [1.59753834E12, 0.0], [1.59753996E12, 0.0], [1.59753954E12, 0.0], [1.59753894E12, 0.0], [1.59753792E12, 0.0], [1.59754116E12, 0.020895522388059702]], "isOverall": false, "label": "Make an order", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5975417E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 17.0, "minX": 1.59753756E12, "maxY": 3105.0, "series": [{"data": [[1.59753852E12, 1085.0], [1.59754074E12, 1085.0], [1.59753912E12, 1094.0], [1.59754014E12, 1134.0], [1.59754032E12, 1081.0], [1.5975381E12, 3083.0], [1.59753972E12, 2116.0], [1.59754134E12, 1095.0], [1.5975393E12, 1088.0], [1.5975387E12, 1084.0], [1.59753768E12, 1077.0], [1.59754092E12, 2080.0], [1.59753828E12, 1085.0], [1.5975405E12, 2108.0], [1.59753888E12, 1087.0], [1.5975399E12, 2114.0], [1.59754008E12, 1092.0], [1.5975411E12, 1124.0], [1.59753786E12, 1093.0], [1.59753948E12, 1092.0], [1.59754128E12, 1081.0], [1.59753846E12, 1091.0], [1.59753906E12, 1089.0], [1.59754068E12, 1112.0], [1.59754026E12, 2073.0], [1.59753804E12, 2083.0], [1.59753864E12, 3081.0], [1.59753966E12, 3105.0], [1.59753984E12, 1070.0], [1.59754146E12, 2059.0], [1.59754086E12, 1085.0], [1.59753762E12, 2082.0], [1.59753924E12, 1092.0], [1.59753822E12, 1092.0], [1.59754104E12, 1085.0], [1.59753882E12, 1089.0], [1.59754044E12, 1073.0], [1.59754002E12, 1074.0], [1.5975384E12, 1089.0], [1.59753942E12, 1092.0], [1.597539E12, 1085.0], [1.5975396E12, 1094.0], [1.59754122E12, 1085.0], [1.59754062E12, 1105.0], [1.5975408E12, 1085.0], [1.59753798E12, 2082.0], [1.59753858E12, 1085.0], [1.5975402E12, 1091.0], [1.59753756E12, 1089.0], [1.59753978E12, 2118.0], [1.59753816E12, 1093.0], [1.59753918E12, 1093.0], [1.5975414E12, 1070.0], [1.59753876E12, 1095.0], [1.59754098E12, 1081.0], [1.59753936E12, 1094.0], [1.59754038E12, 1062.0], [1.59754056E12, 1093.0], [1.59753834E12, 1309.0], [1.59753996E12, 1070.0], [1.59753954E12, 1094.0], [1.59753894E12, 1087.0], [1.59753792E12, 2074.0], [1.59754116E12, 1091.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59753852E12, 23.0], [1.59754074E12, 22.459999537467958], [1.59753912E12, 23.0], [1.59754014E12, 23.0], [1.59754032E12, 23.0], [1.5975381E12, 23.0], [1.59753972E12, 23.0], [1.59754134E12, 18.0], [1.5975393E12, 23.0], [1.5975387E12, 23.0], [1.59753768E12, 23.0], [1.59754092E12, 23.0], [1.59753828E12, 23.0], [1.5975405E12, 23.0], [1.59753888E12, 23.0], [1.5975399E12, 23.0], [1.59754008E12, 23.0], [1.5975411E12, 23.0], [1.59753786E12, 24.0], [1.59753948E12, 23.0], [1.59754128E12, 22.0], [1.59753846E12, 23.0], [1.59753906E12, 23.0], [1.59754068E12, 23.0], [1.59754026E12, 23.0], [1.59753804E12, 23.0], [1.59753864E12, 23.0], [1.59753966E12, 22.0], [1.59753984E12, 23.0], [1.59754146E12, 18.0], [1.59754086E12, 23.0], [1.59753762E12, 23.0], [1.59753924E12, 23.0], [1.59753822E12, 23.0], [1.59754104E12, 23.0], [1.59753882E12, 23.0], [1.59754044E12, 23.0], [1.59754002E12, 23.0], [1.5975384E12, 23.0], [1.59753942E12, 23.0], [1.597539E12, 23.0], [1.5975396E12, 23.0], [1.59754122E12, 23.0], [1.59754062E12, 23.0], [1.5975408E12, 23.0], [1.59753798E12, 23.0], [1.59753858E12, 22.0], [1.5975402E12, 23.0], [1.59753756E12, 24.0], [1.59753978E12, 22.0], [1.59753816E12, 23.0], [1.59753918E12, 23.0], [1.5975414E12, 18.0], [1.59753876E12, 23.0], [1.59754098E12, 22.0], [1.59753936E12, 23.0], [1.59754038E12, 23.0], [1.59754056E12, 23.0], [1.59753834E12, 23.0], [1.59753996E12, 22.0], [1.59753954E12, 23.0], [1.59753894E12, 23.0], [1.59753792E12, 23.0], [1.59754116E12, 23.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59753852E12, 23.0], [1.59754074E12, 23.0], [1.59753912E12, 23.0], [1.59754014E12, 23.0], [1.59754032E12, 23.0], [1.5975381E12, 23.0], [1.59753972E12, 23.0], [1.59754134E12, 18.0], [1.5975393E12, 23.0], [1.5975387E12, 23.0], [1.59753768E12, 23.0], [1.59754092E12, 23.0], [1.59753828E12, 23.0], [1.5975405E12, 23.0], [1.59753888E12, 23.0], [1.5975399E12, 23.0], [1.59754008E12, 23.0], [1.5975411E12, 23.0], [1.59753786E12, 24.0], [1.59753948E12, 23.0], [1.59754128E12, 22.0], [1.59753846E12, 23.0], [1.59753906E12, 23.0], [1.59754068E12, 23.0], [1.59754026E12, 23.0], [1.59753804E12, 23.0], [1.59753864E12, 23.0], [1.59753966E12, 22.30500018596649], [1.59753984E12, 23.0], [1.59754146E12, 18.0], [1.59754086E12, 23.0], [1.59753762E12, 23.0], [1.59753924E12, 23.0], [1.59753822E12, 23.0], [1.59754104E12, 23.0], [1.59753882E12, 23.0], [1.59754044E12, 23.0], [1.59754002E12, 23.0], [1.5975384E12, 23.0], [1.59753942E12, 23.0], [1.597539E12, 23.0], [1.5975396E12, 23.0], [1.59754122E12, 23.0], [1.59754062E12, 23.0], [1.5975408E12, 23.0], [1.59753798E12, 23.0], [1.59753858E12, 23.0], [1.5975402E12, 23.0], [1.59753756E12, 24.0], [1.59753978E12, 22.413900187015535], [1.59753816E12, 23.0], [1.59753918E12, 23.0], [1.5975414E12, 18.0], [1.59753876E12, 23.0], [1.59754098E12, 22.0], [1.59753936E12, 23.0], [1.59754038E12, 23.0], [1.59754056E12, 23.0], [1.59753834E12, 23.0], [1.59753996E12, 22.0], [1.59753954E12, 23.0], [1.59753894E12, 23.0], [1.59753792E12, 23.0], [1.59754116E12, 23.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59753852E12, 23.0], [1.59754074E12, 23.0], [1.59753912E12, 23.0], [1.59754014E12, 23.0], [1.59754032E12, 23.0], [1.5975381E12, 23.0], [1.59753972E12, 23.0], [1.59754134E12, 18.0], [1.5975393E12, 23.0], [1.5975387E12, 23.0], [1.59753768E12, 23.0], [1.59754092E12, 23.0], [1.59753828E12, 23.0], [1.5975405E12, 23.0], [1.59753888E12, 23.0], [1.5975399E12, 23.0], [1.59754008E12, 23.0], [1.5975411E12, 23.0], [1.59753786E12, 24.0], [1.59753948E12, 23.0], [1.59754128E12, 22.0], [1.59753846E12, 23.0], [1.59753906E12, 23.0], [1.59754068E12, 23.0], [1.59754026E12, 23.0], [1.59753804E12, 23.0], [1.59753864E12, 23.0], [1.59753966E12, 22.0], [1.59753984E12, 23.0], [1.59754146E12, 18.0], [1.59754086E12, 23.0], [1.59753762E12, 23.0], [1.59753924E12, 23.0], [1.59753822E12, 23.0], [1.59754104E12, 23.0], [1.59753882E12, 23.0], [1.59754044E12, 23.0], [1.59754002E12, 23.0], [1.5975384E12, 23.0], [1.59753942E12, 23.0], [1.597539E12, 23.0], [1.5975396E12, 23.0], [1.59754122E12, 23.0], [1.59754062E12, 23.0], [1.5975408E12, 23.0], [1.59753798E12, 23.0], [1.59753858E12, 22.23749975860119], [1.5975402E12, 23.0], [1.59753756E12, 24.0], [1.59753978E12, 22.0], [1.59753816E12, 23.0], [1.59753918E12, 23.0], [1.5975414E12, 18.0], [1.59753876E12, 23.0], [1.59754098E12, 22.0], [1.59753936E12, 23.0], [1.59754038E12, 23.0], [1.59754056E12, 23.0], [1.59753834E12, 23.0], [1.59753996E12, 22.0], [1.59753954E12, 23.0], [1.59753894E12, 23.0], [1.59753792E12, 23.0], [1.59754116E12, 23.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.59753852E12, 22.0], [1.59754074E12, 21.0], [1.59753912E12, 21.0], [1.59754014E12, 22.0], [1.59754032E12, 22.0], [1.5975381E12, 20.0], [1.59753972E12, 21.0], [1.59754134E12, 17.0], [1.5975393E12, 21.0], [1.5975387E12, 22.0], [1.59753768E12, 22.0], [1.59754092E12, 21.0], [1.59753828E12, 21.0], [1.5975405E12, 21.0], [1.59753888E12, 22.0], [1.5975399E12, 22.0], [1.59754008E12, 22.0], [1.5975411E12, 22.0], [1.59753786E12, 24.0], [1.59753948E12, 22.0], [1.59754128E12, 18.0], [1.59753846E12, 22.0], [1.59753906E12, 22.0], [1.59754068E12, 21.0], [1.59754026E12, 22.0], [1.59753804E12, 22.0], [1.59753864E12, 22.0], [1.59753966E12, 21.0], [1.59753984E12, 22.0], [1.59754146E12, 17.0], [1.59754086E12, 22.0], [1.59753762E12, 21.0], [1.59753924E12, 22.0], [1.59753822E12, 22.0], [1.59754104E12, 22.0], [1.59753882E12, 21.0], [1.59754044E12, 22.0], [1.59754002E12, 22.0], [1.5975384E12, 21.0], [1.59753942E12, 22.0], [1.597539E12, 22.0], [1.5975396E12, 22.0], [1.59754122E12, 21.0], [1.59754062E12, 22.0], [1.5975408E12, 21.0], [1.59753798E12, 21.0], [1.59753858E12, 21.0], [1.5975402E12, 22.0], [1.59753756E12, 23.0], [1.59753978E12, 22.0], [1.59753816E12, 22.0], [1.59753918E12, 22.0], [1.5975414E12, 17.0], [1.59753876E12, 21.0], [1.59754098E12, 21.0], [1.59753936E12, 21.0], [1.59754038E12, 22.0], [1.59754056E12, 22.0], [1.59753834E12, 22.0], [1.59753996E12, 21.0], [1.59753954E12, 22.0], [1.59753894E12, 22.0], [1.59753792E12, 22.0], [1.59754116E12, 22.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59753852E12, 40.0], [1.59754074E12, 39.0], [1.59753912E12, 39.0], [1.59754014E12, 38.5], [1.59754032E12, 39.0], [1.5975381E12, 40.0], [1.59753972E12, 40.0], [1.59754134E12, 31.0], [1.5975393E12, 39.0], [1.5975387E12, 39.0], [1.59753768E12, 39.0], [1.59754092E12, 39.0], [1.59753828E12, 40.0], [1.5975405E12, 40.0], [1.59753888E12, 39.0], [1.5975399E12, 40.0], [1.59754008E12, 40.0], [1.5975411E12, 39.0], [1.59753786E12, 41.0], [1.59753948E12, 39.0], [1.59754128E12, 33.0], [1.59753846E12, 40.0], [1.59753906E12, 40.0], [1.59754068E12, 40.0], [1.59754026E12, 39.0], [1.59753804E12, 39.0], [1.59753864E12, 39.0], [1.59753966E12, 39.0], [1.59753984E12, 39.0], [1.59754146E12, 30.0], [1.59754086E12, 39.0], [1.59753762E12, 40.0], [1.59753924E12, 40.0], [1.59753822E12, 40.0], [1.59754104E12, 39.0], [1.59753882E12, 39.0], [1.59754044E12, 40.0], [1.59754002E12, 40.0], [1.5975384E12, 39.0], [1.59753942E12, 40.0], [1.597539E12, 40.0], [1.5975396E12, 40.0], [1.59754122E12, 40.0], [1.59754062E12, 39.0], [1.5975408E12, 40.0], [1.59753798E12, 40.0], [1.59753858E12, 39.0], [1.5975402E12, 39.5], [1.59753756E12, 41.0], [1.59753978E12, 40.0], [1.59753816E12, 40.0], [1.59753918E12, 40.0], [1.5975414E12, 30.0], [1.59753876E12, 40.0], [1.59754098E12, 39.5], [1.59753936E12, 39.5], [1.59754038E12, 40.0], [1.59754056E12, 40.0], [1.59753834E12, 39.0], [1.59753996E12, 40.0], [1.59753954E12, 40.0], [1.59753894E12, 39.5], [1.59753792E12, 40.0], [1.59754116E12, 40.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59754146E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27.5, "minX": 1.0, "maxY": 1049025.0, "series": [{"data": [[33.0, 32.0], [32.0, 33.0], [34.0, 33.0], [35.0, 32.0], [37.0, 32.0], [36.0, 33.0], [38.0, 33.0], [39.0, 33.0], [40.0, 32.0], [41.0, 33.0], [42.0, 32.0], [43.0, 39.0], [44.0, 32.0], [45.0, 32.0], [46.0, 32.5], [47.0, 39.0], [48.0, 36.0], [6.0, 43.5], [12.0, 38.5], [14.0, 41.0], [15.0, 41.5], [16.0, 35.5], [17.0, 27.5], [18.0, 36.0], [19.0, 28.0], [20.0, 40.0], [21.0, 32.0], [22.0, 33.0], [23.0, 41.0], [24.0, 33.0], [25.0, 32.0], [26.0, 34.0], [27.0, 33.0], [28.0, 33.0], [29.0, 33.0], [30.0, 33.5], [31.0, 33.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 960086.0], [1.0, 959942.0], [35.0, 956094.0], [38.0, 990286.5], [40.0, 959404.0], [42.0, 959822.0], [29.0, 963087.0], [31.0, 1049025.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 48.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 43.5, "series": [{"data": [[33.0, 32.0], [32.0, 33.0], [34.0, 33.0], [35.0, 32.0], [37.0, 32.0], [36.0, 33.0], [38.0, 33.0], [39.0, 33.0], [40.0, 32.0], [41.0, 33.0], [42.0, 32.0], [43.0, 39.0], [44.0, 32.0], [45.0, 32.0], [46.0, 32.0], [47.0, 39.0], [48.0, 36.0], [6.0, 43.5], [12.0, 38.5], [14.0, 41.0], [15.0, 41.5], [16.0, 35.5], [17.0, 27.5], [18.0, 36.0], [19.0, 28.0], [20.0, 40.0], [21.0, 32.0], [22.0, 33.0], [23.0, 41.0], [24.0, 33.0], [25.0, 32.0], [26.0, 34.0], [27.0, 33.0], [28.0, 33.0], [29.0, 33.0], [30.0, 33.5], [31.0, 33.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 0.0], [1.0, 0.0], [35.0, 0.0], [38.0, 0.0], [40.0, 0.0], [42.0, 0.0], [29.0, 0.0], [31.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 48.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.133333333333334, "minX": 1.59753756E12, "maxY": 34.68333333333333, "series": [{"data": [[1.59753852E12, 33.96666666666667], [1.59754074E12, 32.333333333333336], [1.59753912E12, 33.7], [1.59754014E12, 31.75], [1.59754032E12, 30.666666666666668], [1.5975381E12, 34.55], [1.59753972E12, 32.53333333333333], [1.59754134E12, 34.2], [1.5975393E12, 33.483333333333334], [1.5975387E12, 33.483333333333334], [1.59753768E12, 26.533333333333335], [1.59754092E12, 33.11666666666667], [1.59753828E12, 34.63333333333333], [1.5975405E12, 32.21666666666667], [1.59753888E12, 33.666666666666664], [1.5975399E12, 32.56666666666667], [1.59754008E12, 31.766666666666666], [1.5975411E12, 33.13333333333333], [1.59753786E12, 5.133333333333334], [1.59753948E12, 32.53333333333333], [1.59754128E12, 34.21666666666667], [1.59753846E12, 34.3], [1.59753906E12, 33.68333333333333], [1.59754068E12, 32.7], [1.59754026E12, 30.666666666666668], [1.59753804E12, 34.6], [1.59753864E12, 33.61666666666667], [1.59753966E12, 32.516666666666666], [1.59753984E12, 32.7], [1.59754146E12, 32.916666666666664], [1.59754086E12, 32.3], [1.59753762E12, 29.7], [1.59753924E12, 33.733333333333334], [1.59753822E12, 34.6], [1.59754104E12, 33.233333333333334], [1.59753882E12, 33.733333333333334], [1.59754044E12, 32.11666666666667], [1.59754002E12, 31.633333333333333], [1.5975384E12, 34.68333333333333], [1.59753942E12, 32.833333333333336], [1.597539E12, 33.56666666666667], [1.5975396E12, 32.8], [1.59754122E12, 34.03333333333333], [1.59754062E12, 32.733333333333334], [1.5975408E12, 32.06666666666667], [1.59753798E12, 34.55], [1.59753858E12, 33.733333333333334], [1.5975402E12, 30.666666666666668], [1.59753756E12, 12.966666666666667], [1.59753978E12, 32.61666666666667], [1.59753816E12, 34.55], [1.59753918E12, 33.71666666666667], [1.5975414E12, 34.2], [1.59753876E12, 33.666666666666664], [1.59754098E12, 33.13333333333333], [1.59753936E12, 33.8], [1.59754038E12, 31.6], [1.59754056E12, 32.28333333333333], [1.59753834E12, 34.63333333333333], [1.59753996E12, 31.833333333333332], [1.59753954E12, 33.28333333333333], [1.59753894E12, 33.63333333333333], [1.59753792E12, 34.416666666666664], [1.59754116E12, 33.56666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59754146E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.59753756E12, "maxY": 34.7, "series": [{"data": [[1.59753852E12, 33.983333333333334], [1.59754074E12, 32.31666666666667], [1.59753912E12, 33.75], [1.59754014E12, 31.733333333333334], [1.59754032E12, 30.666666666666668], [1.5975381E12, 34.56666666666667], [1.59753972E12, 32.516666666666666], [1.59754134E12, 34.2], [1.5975393E12, 33.5], [1.5975387E12, 33.516666666666666], [1.59753768E12, 26.566666666666666], [1.59754092E12, 33.13333333333333], [1.59753828E12, 34.63333333333333], [1.5975405E12, 32.2], [1.59753888E12, 33.666666666666664], [1.5975399E12, 32.6], [1.59754008E12, 31.766666666666666], [1.5975411E12, 33.13333333333333], [1.59753786E12, 5.133333333333334], [1.59753948E12, 32.55], [1.59754128E12, 34.233333333333334], [1.59753846E12, 34.266666666666666], [1.59753906E12, 33.61666666666667], [1.59754068E12, 32.68333333333333], [1.59754026E12, 30.666666666666668], [1.59753804E12, 34.65], [1.59753864E12, 33.583333333333336], [1.59753966E12, 32.483333333333334], [1.59753984E12, 32.68333333333333], [1.59754146E12, 32.95], [1.59754086E12, 32.3], [1.59753762E12, 29.683333333333334], [1.59753924E12, 33.733333333333334], [1.59753822E12, 34.6], [1.59754104E12, 33.233333333333334], [1.59753882E12, 33.81666666666667], [1.59754044E12, 32.1], [1.59754002E12, 31.6], [1.5975384E12, 34.7], [1.59753942E12, 32.78333333333333], [1.597539E12, 33.6], [1.5975396E12, 32.78333333333333], [1.59754122E12, 34.06666666666667], [1.59754062E12, 32.733333333333334], [1.5975408E12, 32.083333333333336], [1.59753798E12, 34.516666666666666], [1.59753858E12, 33.733333333333334], [1.5975402E12, 30.666666666666668], [1.59753756E12, 12.95], [1.59753978E12, 32.666666666666664], [1.59753816E12, 34.56666666666667], [1.59753918E12, 33.7], [1.5975414E12, 34.18333333333333], [1.59753876E12, 33.583333333333336], [1.59754098E12, 33.13333333333333], [1.59753936E12, 33.766666666666666], [1.59754038E12, 31.6], [1.59754056E12, 32.31666666666667], [1.59753834E12, 34.6], [1.59753996E12, 31.8], [1.59753954E12, 33.3], [1.59753894E12, 33.6], [1.59753792E12, 34.36666666666667], [1.59754116E12, 33.5]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.59754056E12, 0.016666666666666666], [1.59754122E12, 0.016666666666666666], [1.5975417E12, 0.016666666666666666], [1.59753948E12, 0.03333333333333333], [1.59754038E12, 0.05], [1.59754086E12, 0.03333333333333333], [1.59754116E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5975417E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.59753756E12, "maxY": 17.366666666666667, "series": [{"data": [[1.59753852E12, 16.983333333333334], [1.59754074E12, 16.166666666666668], [1.59753912E12, 16.866666666666667], [1.59754014E12, 15.85], [1.59754032E12, 15.333333333333334], [1.5975381E12, 17.266666666666666], [1.59753972E12, 16.266666666666666], [1.59754134E12, 17.1], [1.5975393E12, 16.733333333333334], [1.5975387E12, 16.75], [1.59753768E12, 13.266666666666667], [1.59754092E12, 16.566666666666666], [1.59753828E12, 17.316666666666666], [1.5975405E12, 16.1], [1.59753888E12, 16.833333333333332], [1.5975399E12, 16.3], [1.59754008E12, 15.9], [1.5975411E12, 16.566666666666666], [1.59753786E12, 2.566666666666667], [1.59753948E12, 16.266666666666666], [1.59754128E12, 17.116666666666667], [1.59753846E12, 17.15], [1.59753906E12, 16.816666666666666], [1.59754068E12, 16.35], [1.59754026E12, 15.333333333333334], [1.59753804E12, 17.333333333333332], [1.59753864E12, 16.8], [1.59753966E12, 16.233333333333334], [1.59753984E12, 16.333333333333332], [1.59754146E12, 16.483333333333334], [1.59754086E12, 16.15], [1.59753762E12, 14.85], [1.59753924E12, 16.883333333333333], [1.59753822E12, 17.3], [1.59754104E12, 16.616666666666667], [1.59753882E12, 16.9], [1.59754044E12, 16.05], [1.59754002E12, 15.8], [1.5975384E12, 17.333333333333332], [1.59753942E12, 16.4], [1.597539E12, 16.8], [1.5975396E12, 16.4], [1.59754122E12, 17.016666666666666], [1.59754062E12, 16.366666666666667], [1.5975408E12, 16.033333333333335], [1.59753798E12, 17.266666666666666], [1.59753858E12, 16.866666666666667], [1.5975402E12, 15.333333333333334], [1.59753756E12, 6.483333333333333], [1.59753978E12, 16.333333333333332], [1.59753816E12, 17.283333333333335], [1.59753918E12, 16.85], [1.5975414E12, 17.1], [1.59753876E12, 16.8], [1.59754098E12, 16.566666666666666], [1.59753936E12, 16.9], [1.59754038E12, 15.8], [1.59754056E12, 16.15], [1.59753834E12, 17.316666666666666], [1.59753996E12, 15.916666666666666], [1.59753954E12, 16.65], [1.59753894E12, 16.8], [1.59753792E12, 17.183333333333334], [1.59754116E12, 16.75]], "isOverall": false, "label": "Open Main Page-success", "isController": false}, {"data": [[1.59754056E12, 0.016666666666666666], [1.59754122E12, 0.016666666666666666], [1.59753948E12, 0.016666666666666666], [1.59754116E12, 0.016666666666666666]], "isOverall": false, "label": "Open Main Page-failure", "isController": false}, {"data": [[1.59753852E12, 17.0], [1.59754074E12, 16.15], [1.59753912E12, 16.883333333333333], [1.59754014E12, 15.883333333333333], [1.59754032E12, 15.333333333333334], [1.5975381E12, 17.3], [1.59753972E12, 16.25], [1.59754134E12, 17.1], [1.5975393E12, 16.766666666666666], [1.5975387E12, 16.766666666666666], [1.59753768E12, 13.3], [1.59754092E12, 16.566666666666666], [1.59753828E12, 17.316666666666666], [1.5975405E12, 16.1], [1.59753888E12, 16.833333333333332], [1.5975399E12, 16.3], [1.59754008E12, 15.866666666666667], [1.5975411E12, 16.566666666666666], [1.59753786E12, 2.566666666666667], [1.59753948E12, 16.283333333333335], [1.59754128E12, 17.116666666666667], [1.59753846E12, 17.116666666666667], [1.59753906E12, 16.8], [1.59754068E12, 16.333333333333332], [1.59754026E12, 15.333333333333334], [1.59753804E12, 17.316666666666666], [1.59753864E12, 16.783333333333335], [1.59753966E12, 16.25], [1.59753984E12, 16.35], [1.59754146E12, 16.466666666666665], [1.59754086E12, 16.15], [1.59753762E12, 14.833333333333334], [1.59753924E12, 16.85], [1.59753822E12, 17.3], [1.59754104E12, 16.616666666666667], [1.59753882E12, 16.916666666666668], [1.59754044E12, 16.05], [1.59754002E12, 15.8], [1.5975384E12, 17.366666666666667], [1.59753942E12, 16.383333333333333], [1.597539E12, 16.8], [1.5975396E12, 16.383333333333333], [1.59754122E12, 17.05], [1.59754062E12, 16.366666666666667], [1.5975408E12, 16.05], [1.59753798E12, 17.25], [1.59753858E12, 16.866666666666667], [1.5975402E12, 15.333333333333334], [1.59753756E12, 6.466666666666667], [1.59753978E12, 16.333333333333332], [1.59753816E12, 17.283333333333335], [1.59753918E12, 16.85], [1.5975414E12, 17.083333333333332], [1.59753876E12, 16.783333333333335], [1.59754098E12, 16.566666666666666], [1.59753936E12, 16.866666666666667], [1.59754038E12, 15.8], [1.59754056E12, 16.166666666666668], [1.59753834E12, 17.283333333333335], [1.59753996E12, 15.883333333333333], [1.59753954E12, 16.65], [1.59753894E12, 16.8], [1.59753792E12, 17.183333333333334], [1.59754116E12, 16.75]], "isOverall": false, "label": "Make an order-success", "isController": false}, {"data": [[1.5975417E12, 0.016666666666666666], [1.59753948E12, 0.016666666666666666], [1.59754038E12, 0.05], [1.59754086E12, 0.03333333333333333]], "isOverall": false, "label": "Make an order-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5975417E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.59753756E12, "maxY": 34.7, "series": [{"data": [[1.59753852E12, 33.983333333333334], [1.59754074E12, 32.31666666666667], [1.59753912E12, 33.75], [1.59754014E12, 31.733333333333334], [1.59754032E12, 30.666666666666668], [1.5975381E12, 34.56666666666667], [1.59753972E12, 32.516666666666666], [1.59754134E12, 34.2], [1.5975393E12, 33.5], [1.5975387E12, 33.516666666666666], [1.59753768E12, 26.566666666666666], [1.59754092E12, 33.13333333333333], [1.59753828E12, 34.63333333333333], [1.5975405E12, 32.2], [1.59753888E12, 33.666666666666664], [1.5975399E12, 32.6], [1.59754008E12, 31.766666666666666], [1.5975411E12, 33.13333333333333], [1.59753786E12, 5.133333333333334], [1.59753948E12, 32.55], [1.59754128E12, 34.233333333333334], [1.59753846E12, 34.266666666666666], [1.59753906E12, 33.61666666666667], [1.59754068E12, 32.68333333333333], [1.59754026E12, 30.666666666666668], [1.59753804E12, 34.65], [1.59753864E12, 33.583333333333336], [1.59753966E12, 32.483333333333334], [1.59753984E12, 32.68333333333333], [1.59754146E12, 32.95], [1.59754086E12, 32.3], [1.59753762E12, 29.683333333333334], [1.59753924E12, 33.733333333333334], [1.59753822E12, 34.6], [1.59754104E12, 33.233333333333334], [1.59753882E12, 33.81666666666667], [1.59754044E12, 32.1], [1.59754002E12, 31.6], [1.5975384E12, 34.7], [1.59753942E12, 32.78333333333333], [1.597539E12, 33.6], [1.5975396E12, 32.78333333333333], [1.59754122E12, 34.06666666666667], [1.59754062E12, 32.733333333333334], [1.5975408E12, 32.083333333333336], [1.59753798E12, 34.516666666666666], [1.59753858E12, 33.733333333333334], [1.5975402E12, 30.666666666666668], [1.59753756E12, 12.95], [1.59753978E12, 32.666666666666664], [1.59753816E12, 34.56666666666667], [1.59753918E12, 33.7], [1.5975414E12, 34.18333333333333], [1.59753876E12, 33.583333333333336], [1.59754098E12, 33.13333333333333], [1.59753936E12, 33.766666666666666], [1.59754038E12, 31.6], [1.59754056E12, 32.31666666666667], [1.59753834E12, 34.6], [1.59753996E12, 31.8], [1.59753954E12, 33.3], [1.59753894E12, 33.6], [1.59753792E12, 34.36666666666667], [1.59754116E12, 33.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.59754056E12, 0.016666666666666666], [1.59754122E12, 0.016666666666666666], [1.5975417E12, 0.016666666666666666], [1.59753948E12, 0.03333333333333333], [1.59754038E12, 0.05], [1.59754086E12, 0.03333333333333333], [1.59754116E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5975417E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

